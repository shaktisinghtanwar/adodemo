{
  "openapi": "3.0.0",
  "info": {
    "title": "DataCore API  - Basketball",
    "description": "# Introduction\n\nThe DataCore API is a REST based API. This means it makes use of the followng HTTP primitives:\n * GET - To retrieve data\n * POST - To add a record\n * PUT - To update a record\n * DELETE - To delete a record\n\nAll data sent and received as well as error messages is in the JSON format.\n\n## Character Sets and Names\n\nAll data sent as both body and query parameters should be in the UTF-8 character set. All data returned will also be in UTF-8 strings.\n\nA number of fields (especially names) have both a *local* and *latin* variant. The *local* variant is the string as it would be written in the local language of the organization.  The *latin* variant is the string as it would be written, only using latin characters/alphabet. Character sets like Cyrillic, Chinese are valid for the *local* string but not the *latin* string.  Regardless of the name, all strings should still be sent using UTF-8.\n\n## Partial Responses\n\nBy default, the server sends back the full representation of a resource after processing requests. For better performance, you can ask the server to send only the fields you really need and get a partial response instead. This lets your application avoid transferring, parsing and storing un-needed data.\n\nTo request a partial response, use the `fields` query parameter to specify the fields you want returned.\n\n    fields=dob,firstName,familyName,organization(id),organizations[name],teams[name,details/metrics/*,tags(id)]\n\n### Syntax\n\n Character | Meaning\n --------- | -------\n **,**     | Delimits fields. All fields need to be delimited by a **,**.  eg. `fields=firstName,familyName`\n **/**     | Use `a/b` to select a field b that is nested within field a; use `a/b/c` to select a field c nested within b.\n **( )**   | The subselector allows you to specify a set of sub fields of an array or object by placing those fields in the parentheses. For example `competitors(name,address/state)` would return the name fields of the competitors key and the state field of the address key inside the competitors object.  This is also equivalent to `competitors/name,competitors/address/state`.\n **\\***   | The wildcard character matches all fields at a level. eg. `*,organization/id` would return all fields, but only the id field of the organization key\n **[]**  | The field selection will generally only refer to the fields being returned in the *data* section on the response, but by giving the name of the resource type and then enclosing the field selection syntax in square brackets you can select which fields display in the *included* section as well. eg `firstName,familyName,organizations[name,id,country]` will display the firstName and familyName form the data element and only the name, id and country from the organizations resources in the include section.\n\nAll field references are relative to the `data` element.\n\nIf the resourceType and id fields are not displayed inside the data section for a sub-element, then the system will not make them available for [Resource Inclusion](#Resource_Inclusion), regardless of the use of the includes parameter.\n\n\n## Pagination\nWhen retrieving information using GET methods, the optional `limit` parameter sets the maximum number of rows to return in a response. The maximum is 200. If this value is empty `limit` defaults to 10.\n\nIf more rows are available, the response will include a `next` element (inside the *links* section), which contains a URL for requesting the next page. If this value is not provided, no more rows are available. A `previous` page element is also provided if appropriate.\n\nThese URIs can be generated manually by using the `offset` parameter combined with the `limit` parameter. The `offset` parameter will return `limit` rows of data starting at the **offset + 1** row.\n\n## Resource Inclusion\nWhen a response is returned it will not automatically include extra data from other resources/models. It will only list the resource type and id. eg.\n\n        \"competition\" : {\n            \"resourceType\" : \"competitions\",\n            \"id\" : \"009e9276-5c80-11e8-9c2d-fa7ae01bbebc\"\n        },\nIf specified in the query string the `include` parameter will expand that resource in the *includes* section of the response. The `include` parameter takes a comma separated list of resourceTypes to be included.\n\n    /v1/basketball/org/1/teams/009e9276-5c80-11e8-9c2d-fa7ae01bbebc?include=competitions,leagues\n\nIf the resourceType is included in the parameter and that resourceType is available in the response, then response will include an *includes* key.  Inside that *includes* key is a *resources* object.  Inside that object, there are keys for each type of included resourceType.  Inside each resourceType keyed against the id is an object representing that resource.\n\n    {\n        \"meta\": ...\n        \"links\": ...\n        \"data\": ...\n        \"includes\": {\n            \"resources\": {\n                \"competitions\":\n                    \"009e9276-5c80-11e8-9c2d-fa7ae01bbebc\": {\n                        ...\n                        Competition Resource Details\n                        ...        \n                    }\n                },\n                \"leagues\": {\n                    \"009e9276-5c80-11e8-9c2d-fa7bc24e4ebc\": {\n                        ...\n                        League Resource Details\n                        ...        \n                    }\n                }\n            }\n        }\n    }\n\nThe list of available inclusions are\n\n\n code            | Resource \n -----            | ----- \n `competitions`|Competitions\n `entities`      | Teams \n `entityGroups`|Clubs\n `fixtures`|Matches\n `leagues`       | Leagues \n `organizations` | Organizations \n `persons`|Persons\n `sites`|Sites\n `seasons`|Seasons\n `seasonPools`|Pools\n `seasonStages`|Stages\n `seasonRounds`|Rounds\n `venues`|Venues\n\n## External Ids\n\nThe API allows certain end-points to be accessed via the externalId as supplied by the user.  \n\nThe external parameter when used, lists the Ids that are to be replaced.\n\n    /v1/basketball/org/1/competitions/NL?external=competitionId\n\nBelow are a list of all the Ids that can be replaced.  These Ids can be replaced in GET, POST, PUT & DELETE calls.\n* competitionId\n* seasonId\n* fixtureId\n* siteId\n* venueId\n* entityGroupId\n* entityId\n* personId\n\nThe allowable format of an externalId is any character except:\n* / (forward slash)\n* ? (question mark)\n* & (ampersand)\n\n## Date formats\n\nThe API only accepts dates formatted in the ISO-8601 standard. These dates should be sent with **no** timezone qualifier. The correct timezone will be implied by the context of the call.\n\n**Example:**\n\n For dates with a time component\n\n     YYYY-MM-DDThh:mm:ss.s eg. 2017-06-29T18:20:00.00\n\n For dates with no time component\n\n     YYYY-MM-DD eg. 2017-06-29\n\nwhere  \n YYYY = four-digit year  \n MM = two-digit month (01=January, etc.)  \n DD = two-digit day of month (01 through 31)  \n hh = two digits of hour (00 through 23) (am/pm NOT allowed)   \n mm = two digits of minute (00 through 59)   \n ss = two digits of second (00 through 59)   \n s = one or more digits representing a decimal fraction of a second  \n\n## UUIDs\n\nThe majority of objects in the API use a [universally unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier) (uuid) as an identifier.  The uuid is a number, represented as 32 hexadecimal digits. There are a number of different versions of the uuid, but this API uses only uuid version 1.\n\nWhen a new record (that uses a uuid) is created, this uuid can be generated by the client and included in the POST call.  If left blank, it will be automatically created by the server and return it in the response.\n\nAn example uuid is: `206c7392-b05f-11e8-96f8-529269fb1459`\n\n## Images\n\nSome API calls will return image objects for things such as logos or photos.  The url field of the image object contains the url where you will find that image.  This url is for the 'default' version of the image.  There are some query string parameters available to change how the image is returned.\n\n`format`\n\n By default the image is returned in whatever format it was uploaded in, but by specifying the 'format' parameter you can change this.  Valid options are: `png`, `jpg`, `webp`.\n\n`size`\n\nBy default the image is returned as a square of 100x100 pixels.  By specifying the 'size' parameter the image will be returned at a difference size.  The available options are\n\nsize parameter | dimensions\n -----            | -----\n`100` | 100x100\n`200` | 200x200\n`400` | 400x400\n`800` | 800x800\n`1000` | 1000x1000\n`RAW` | The original dimensions that the image was uploaded with\n\nImages will not be scaled up. If you ask for an image with `size=400`, but the image is only 200x200 then the image will be returned as 200x200.\n\nAll images returned (apart from `size=RAW`) are square. If the original image that is uploaded is not square, then it is padded with a transparent (white for jpg) background.\n\nAn example url is: `https://img.dc.atriumsports.com/586aa6b195d243c4ae4154c8a61eda19?size=200&format=webp`\n\n## DataCore Object Model\n\n<a href = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Persons],[Organizations]-.-<>[Leagues],[Organizations]-.-<>[Divisions],[Divisions]-.-<>[Conferences],[Organizations]-<>[Competitions],[Organizations]-<>[Clubs],[Organizations]-<>[Venues],[Organizations]-<>[Sites],[Organizations]-<>[Teams],[Competitions]-<>[Seasons],[Leagues]-.-<>[Competitions],[Seasons]-<>[Matches],[Matches]-2<>[~Competitors~],[~Competitors~]-.->[Conferences][Matches]-1[Venues],[Clubs]-.-<>[Teams],[Sites]-.-<>[Venues],[Matches]-<>[Fixture Roster],[Seasons]->[Stages],[Seasons]->[Pools],[Seasons]->[Rounds],[Matches]-.->[Stages],[Matches]-.->[Pools],[Matches]-.->[Rounds],[~Competitors~]<-[Teams],[Fixture Roster]<-[Persons],[Teams]->[Season Roster],[Season Roster]<-[Persons].jpg\">\n<img src=\"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Persons],[Organizations]-.-<>[Leagues],[Organizations]-.-<>[Divisions],[Divisions]-.-<>[Conferences],[Organizations]-<>[Competitions],[Organizations]-<>[Clubs],[Organizations]-<>[Venues],[Organizations]-<>[Sites],[Organizations]-<>[Teams],[Competitions]-<>[Seasons],[Leagues]-.-<>[Competitions],[Seasons]-<>[Matches],[Matches]-2<>[~Competitors~],[~Competitors~]-.->[Conferences][Matches]-1[Venues],[Clubs]-.-<>[Teams],[Sites]-.-<>[Venues],[Matches]-<>[Fixture Roster],[Seasons]->[Stages],[Seasons]->[Pools],[Seasons]->[Rounds],[Matches]-.->[Stages],[Matches]-.->[Pools],[Matches]-.->[Rounds],[~Competitors~]<-[Teams],[Fixture Roster]<-[Persons],[Teams]->[Season Roster],[Season Roster]<-[Persons]\"></a>\n\n\nMore detailed information about each component is available in that section of the API documentation.\n\n## Limits/Throttling\n\nAll API requests are limited/throttled to prevent abuse and ensure stability.  There are two types of limiting in place:\n 1. Usage Limits/Quota\n    As a customer you would have been give a number of API calls that you are allowed to make each month. If you exceed this limit then your request will fail.\n 2. Rate Limits\n    As part of your plan you will also have limits as to how often you can make particular calls. For example you may only be able to call a particular endpoint once per minute.  If you exceed these limits then your request will fail.\n\n# Authorization\n\nThis API uses the OAuth 2.0 protocol to authorize calls. OAuth is an open standard that many companies use to provide secure access to protected resources.\n\nWhen you created an application in our management systems you would have been provided with an OAuth client ID and secret key.  By using these credentials and other parametes in a [get token](#token) call you will receive back an **access token**. \n\nThis **access token** must then be sent in the `Authorization` header for each subsequent API call.  Access tokens have a finite life and will expire. When the token expires you will need to create a new token to make more API calls.  Creation of tokens is rate-limited, so you should use the existing token as long as possible.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.example.com/v1/basketball",
      "description": "Production server (uses live data)"
    },
    {
      "url": "https://sandbox-api.example.com:8443/v1/basketball",
      "description": "Sandbox server (uses test data)"
    }
  ],
  "security": [
    {
      "OAuth2": [
        "read:organization"
      ]
    }
  ],
  "components": {
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/oauth/token",
            "scopes": {
              "orgId": "Authenticate based on a specific OrganizationId",
              "read:orggroup": "Read data over multiple organizations using and *orggroup* code",
              "write:organization": "Write/Update any data from below the organization",
              "read:organization": "Read any data from the organization down",
              "write:admin": "Perform administraton API calls",
              "write:admin_organization": "Ability to manage organizations",
              "write:system": "Perform system configuration API calls"
            }
          }
        },
        "description": "You can create a JSON Web Token (JWT) using the [token](#token) API call. Each token is given a set of scopes/permissions. Each endpoint has a scope/permission that it requires to run.  If your token does not possess the correct scope then you will be unable to make the API call."
      }
    },
    "responses": {
      "ErrorResponse": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/components/schemas/ResponseMetaData"
                },
                "error": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ErrorModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP Error code indicating the type of error.  If there are multiple errors, then this will be the code of the first one.",
            "format": "int32",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "A message indicating the reason for the error. If there are multiple errors, then this is the message for the first one.",
            "example": "Field 'dob' must contain a valid date"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorListModel"
            }
          }
        }
      },
      "ErrorListModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP Error code indicating the type of error.",
            "format": "int32",
            "example": 400
          },
          "reason": {
            "enum": [
              "INVALID_DATA",
              "NOT_FOUND",
              "NOT_AUTHORISED",
              "ERROR",
              "DELETE_ERROR"
            ],
            "description": "A short code indicating the type of error",
            "example": "INVALID_DATA"
          },
          "message": {
            "type": "string",
            "description": "A message indicating the reason for the error",
            "example": "Field 'dob' must contain a valid date"
          },
          "rowNumber": {
            "type": "integer",
            "description": "The row number of the payload that cause the error",
            "format": "int32",
            "example": 1
          }
        }
      },
      "ResponseMetaData": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the API in use for this call",
            "example": 1
          },
          "codeVersion": {
            "type": "string",
            "description": "A string indicating the version of the code that handled this request",
            "example": "d6cd1e2bd19e03a81132a23b2025920577f84e37"
          },
          "code": {
            "type": "integer",
            "description": "The HTTP response code for this request",
            "example": 200
          },
          "time": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time this request was made (in UTC).",
            "example": "2018-06-05T23:43:41.227Z"
          },
          "fromCache": {
            "type": "boolean",
            "description": "Was this request served directly from the cache?",
            "example": false
          },
          "count": {
            "type": "integer",
            "description": "The number of records being returned",
            "example": 7
          },
          "limit": {
            "type": "integer",
            "description": "The record limit in place for this request",
            "example": 10
          },
          "offset": {
            "type": "integer",
            "description": "The record offset in place for this request",
            "example": 10
          },
          "generationTime": {
            "type": "number",
            "format": "float",
            "description": "The number of seconds taken to generate this request.",
            "example": 0.011604
          }
        }
      },
      "ResponseLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string",
            "format": "uri",
            "description": "The URI referencing this request."
          },
          "next": {
            "type": "string",
            "format": "uri",
            "description": "The URI referencing the 'next' page, if more data is available."
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "description": "The URI referencing the 'previous' page, if the request is not on the first page."
          }
        }
      },
      "IncludedData": {
        "type": "object",
        "description": "Available if the request used the 'include' parameter.  It contains extra data about resources found in the data block.",
        "properties": {
          "resources": {
            "type": "object",
            "additionalProperties": {
              "description": "The type of resource",
              "type": "object",
              "enum": [
                "league",
                "organisation",
                "persons"
              ],
              "additionalProperties": {
                "type": "object",
                "format": "uuid",
                "description": "The id of the resource",
                "additionalProperties": {
                  "description": "The model for the resource as defined by the type and id"
                }
              }
            }
          }
        }
      },
      "PersonsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "personId": {
            "description": "The unique identifier of the person",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this person belongs to",
            "type": "object"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `DECEASED` Deceased\n>- `PENDING` Pending\n>- `UNREGISTERED` UnRegistered\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "UNREGISTERED",
              "PENDING",
              "DECEASED"
            ],
            "maxLength": 30,
            "default": "ACTIVE",
            "example": "ACTIVE"
          },
          "gender": {
            "description": "The gender of the person\n>- `FEMALE` Female\n>- `MALE` Male\n>- `UNKNOWN` Unknown\n",
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "UNKNOWN"
            ],
            "example": "MALE"
          },
          "nameFullLocal": {
            "description": "The full name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 200,
            "example": "John Smith"
          },
          "languageLocal": {
            "description": "The language code of the full name in [local](#section/Introduction/Character-Sets-and-Names) language. This code is a two letter (lower-case) ISO 639-1 language code.",
            "type": "string",
            "maxLength": 2,
            "nullable": true,
            "example": "en"
          },
          "nameFullLatin": {
            "description": "The full name of the person in [latin](##section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 200,
            "nullable": true,
            "example": "John Smith"
          },
          "dob": {
            "description": "Date of Birth",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "1978-08-24"
          },
          "nationality": {
            "description": "A 3 letter nationality code. We recommend you use ISO-3166 where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "AUS"
          },
          "deceased": {
            "description": "Date deceased",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2016-09-08"
          },
          "additionalNames": {
            "type": "object",
            "description": "Additional names for the person. They are broken down by language, so you can have a different set of names per language",
            "additionalProperties": {
              "type": "object",
              "example": "default",
              "description": "The *property name* here can either be `default` (for a non-language specific name) or a two letter (lower-case) ISO 639-1 language code. eg `fr`, `es`",
              "additionalProperties": false,
              "properties": {
                "display": {
                  "type": "string",
                  "nullable": true
                },
                "television": {
                  "description": "The name to be used on television",
                  "type": "string",
                  "nullable": true
                },
                "scoreboard": {
                  "description": "The name to be used on the scoreboard",
                  "type": "string",
                  "nullable": true
                },
                "pronunciation": {
                  "description": "The description of how to pronounce the name",
                  "type": "string",
                  "nullable": true
                },
                "boxscore": {
                  "type": "string",
                  "nullable": true
                },
                "jersey": {
                  "type": "string",
                  "nullable": true
                },
                "abbreviated": {
                  "type": "string",
                  "nullable": true
                },
                "given": {
                  "type": "string",
                  "nullable": true
                },
                "family": {
                  "type": "string",
                  "nullable": true
                },
                "full": {
                  "type": "string",
                  "nullable": true
                },
                "knownAs": {
                  "type": "string",
                  "nullable": true
                }
              }
            },
            "pattern": "^(default|[a-z]{2})$"
          },
          "additionalDetails": {
            "title": "Additional details",
            "description": "Additional person detail fields",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "height": {
                "description": "Height in cms",
                "type": "number",
                "nullable": true
              },
              "weight": {
                "description": "Weight in kgs",
                "type": "number",
                "nullable": true
              },
              "dominantHand": {
                "description": "Dominant hand",
                "type": "string",
                "nullable": true,
                "enum": [
                  "LEFT",
                  "RIGHT"
                ]
              },
              "dominantFoot": {
                "description": "Dominant foot",
                "type": "string",
                "nullable": true,
                "enum": [
                  "LEFT",
                  "RIGHT"
                ]
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "person model"
      },
      "CompetitionsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "competitionId": {
            "description": "The unique identitifer of the competition",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this competition belongs to",
            "type": "object"
          },
          "leagueId": {
            "description": "The unique identifier of the league",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "league": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "leagues"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The league that this competition belongs to",
            "type": "object"
          },
          "internationalReference": {
            "description": "The international reference for this competition given by the sport governing body",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "CA3243-3"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the competition in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the competition in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "competition model"
      },
      "EntitiesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this team belongs to",
            "type": "object"
          },
          "entityGroupId": {
            "description": "The club that this team belongs to",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entityGroup": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entity_groups"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The club that this team belongs to",
            "type": "object"
          },
          "internationalReference": {
            "description": "The international reference for this team given by the sport governing body",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "CA3243-3"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "ACTIVE"
          },
          "nameFullLocal": {
            "description": "The full name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Los Angeles Armadillos"
          },
          "additionalNames": {
            "type": "object",
            "properties": {
              "nameShortLocal": {
                "description": "The short name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                "type": "string",
                "maxLength": 50,
                "nullable": true,
                "example": "Armadillos"
              },
              "namePlaceLocal": {
                "description": "The name of the place associated with the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                "type": "string",
                "maxLength": 150,
                "nullable": true,
                "example": "Los Angeles"
              },
              "nameShortLatin": {
                "description": "The short name of the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                "type": "string",
                "maxLength": 50,
                "nullable": true,
                "example": "Armadillos"
              },
              "namePlaceLatin": {
                "description": "The name of the place associated with the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                "type": "string",
                "maxLength": 150,
                "nullable": true,
                "example": "Los Angeles"
              }
            }
          },
          "nameFullLatin": {
            "description": "The full name of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Los Angeles Armadillos"
          },
          "codeLocal": {
            "description": "The code of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 5,
            "nullable": true,
            "example": "TEST"
          },
          "codeLatin": {
            "description": "The code of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 5,
            "nullable": true,
            "example": "TEST"
          },
          "address": {
            "title": "Address schema",
            "description": "Street Address for the team",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "address1": {
                "description": "First line of the address",
                "type": "string",
                "nullable": true
              },
              "address2": {
                "description": "Second line of the address",
                "type": "string",
                "nullable": true
              },
              "address3": {
                "description": "Third line of the address",
                "type": "string",
                "nullable": true
              },
              "city": {
                "description": "The city/suburb of the address",
                "type": "string",
                "nullable": true
              },
              "state": {
                "description": "The state of the address",
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "description": "The postal code for the address",
                "type": "string",
                "nullable": true
              },
              "countryCode": {
                "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                "type": "string",
                "nullable": true,
                "maxLength": 3,
                "minLength": 3
              },
              "longitude": {
                "type": "number",
                "nullable": true
              },
              "latitude": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "contacts": {
            "title": "Contact details",
            "description": "Public contact fields",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fax": {
                "type": "string",
                "nullable": true,
                "description": "Fax number",
                "format": "phone"
              },
              "phone": {
                "type": "string",
                "nullable": true,
                "description": "Primary phone number",
                "format": "phone"
              },
              "phoneSecondary": {
                "type": "string",
                "nullable": true,
                "format": "phone",
                "description": "Secondary phone number"
              },
              "email": {
                "type": "string",
                "nullable": true,
                "description": "Primary email address",
                "format": "email"
              }
            }
          },
          "details": {
            "title": "Additional details",
            "description": "Additional detail fields",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "founded": {
                "description": "Year Founded",
                "type": "number",
                "nullable": true
              },
              "squadValue": {
                "description": "Value of Squad",
                "type": "number",
                "nullable": true
              }
            }
          },
          "colors": {
            "type": "object",
            "properties": {
              "primary": {
                "description": "Primary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              },
              "secondary": {
                "description": "Secondary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              },
              "tertiary": {
                "description": "Tertiary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "team model"
      },
      "Entity_GroupsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "entityGroupId": {
            "description": "The club that this team belongs to",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this club belongs to",
            "type": "object"
          },
          "internationalReference": {
            "description": "The international reference for this club given by the sport governing body",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "CA3243-3"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "ACTIVE"
          },
          "nameFullLocal": {
            "description": "The full name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Los Angeles Armadillos"
          },
          "additionalNames": {
            "type": "object",
            "properties": {
              "nameShortLocal": {
                "description": "The short name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                "type": "string",
                "maxLength": 50,
                "nullable": true,
                "example": "Armadillos"
              },
              "namePlaceLocal": {
                "description": "The name of the place associated with the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                "type": "string",
                "maxLength": 150,
                "nullable": true,
                "example": "Los Angeles"
              },
              "nameShortLatin": {
                "description": "The short name of the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                "type": "string",
                "maxLength": 50,
                "nullable": true,
                "example": "Armadillos"
              },
              "namePlaceLatin": {
                "description": "The name of the place associated with the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                "type": "string",
                "maxLength": 150,
                "nullable": true,
                "example": "Los Angeles"
              }
            }
          },
          "nameFullLatin": {
            "description": "The full name of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Los Angeles Armadillos"
          },
          "codeLocal": {
            "description": "The code of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 5,
            "nullable": true,
            "example": "TEST"
          },
          "codeLatin": {
            "description": "The code of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 5,
            "nullable": true,
            "example": "TEST"
          },
          "address": {
            "title": "Address schema",
            "description": "Street Address for the club",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "address1": {
                "description": "First line of the address",
                "type": "string",
                "nullable": true
              },
              "address2": {
                "description": "Second line of the address",
                "type": "string",
                "nullable": true
              },
              "address3": {
                "description": "Third line of the address",
                "type": "string",
                "nullable": true
              },
              "city": {
                "description": "The city/suburb of the address",
                "type": "string",
                "nullable": true
              },
              "state": {
                "description": "The state of the address",
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "description": "The postal code for the address",
                "type": "string",
                "nullable": true
              },
              "countryCode": {
                "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                "type": "string",
                "nullable": true,
                "maxLength": 3,
                "minLength": 3
              },
              "longitude": {
                "type": "number",
                "nullable": true
              },
              "latitude": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "details": {
            "title": "Additional details",
            "description": "Additional detail fields",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "founded": {
                "description": "Year Founded",
                "type": "number",
                "nullable": true
              },
              "squadValue": {
                "description": "Value of Squad",
                "type": "number",
                "nullable": true
              }
            }
          },
          "contacts": {
            "title": "Contact details",
            "description": "Public contact fields",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "fax": {
                "type": "string",
                "nullable": true,
                "description": "Fax number",
                "format": "phone"
              },
              "phone": {
                "type": "string",
                "nullable": true,
                "description": "Primary phone number",
                "format": "phone"
              },
              "phoneSecondary": {
                "type": "string",
                "nullable": true,
                "format": "phone",
                "description": "Secondary phone number"
              },
              "email": {
                "type": "string",
                "nullable": true,
                "description": "Primary email address",
                "format": "email"
              }
            }
          },
          "colors": {
            "type": "object",
            "properties": {
              "primary": {
                "description": "Primary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              },
              "secondary": {
                "description": "Secondary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              },
              "tertiary": {
                "description": "Tertiary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                "type": "string",
                "minLength": 6,
                "maxLength": 6,
                "nullable": true,
                "example": "FFF111"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "club model"
      },
      "Fixture_EntitiesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this match teams belongs to",
            "type": "object"
          },
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entity": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entities"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The team information",
            "type": "object"
          },
          "conferenceId": {
            "description": "The unique identifier of the conference",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "conference": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "conferences"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The conference information",
            "type": "object"
          },
          "divisionId": {
            "description": "The unique identifier of the division",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "division": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "divisions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The division information",
            "type": "object"
          },
          "includeInConferenceStatistics": {
            "description": "Include the statistics for this competitors in the conference statistics?",
            "type": "boolean",
            "example": true
          },
          "isHome": {
            "description": "Is competitor the home team ?",
            "type": "boolean",
            "example": true
          },
          "draw": {
            "description": "Result for this competitor was a draw ?",
            "type": "boolean",
            "example": true
          },
          "resultStatus": {
            "description": "Result status\n>- `CONFIRMED` Confirmed\n>- `DID_NOT_FINISH` Did Not Finish\n>- `DID_NOT_START` Did Not Start\n>- `DISQUALIFIED` Disqualified\n>- `FORFEITED` Forfeited\n>- `IN_PROGRESS` In Progress\n>- `SCHEDULED` Scheduled\n>- `WITHDRAWN` Withdrawn\n>- `WON_BY_FORFEIT` Won By Forfeit\n",
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "CONFIRMED",
              "DISQUALIFIED",
              "FORFEITED",
              "WON_BY_FORFEIT",
              "DID_NOT_FINISH",
              "WITHDRAWN",
              "DID_NOT_START"
            ],
            "maxLength": 100,
            "example": "CONFIRMED"
          },
          "resultPlace": {
            "description": "Result placing",
            "type": "integer",
            "format": "int32",
            "maxLength": 3,
            "nullable": true,
            "example": 1
          },
          "startingNumber": {
            "description": "Starting number",
            "type": "integer",
            "format": "int32",
            "maxLength": 3,
            "nullable": true,
            "example": 1
          },
          "score": {
            "description": "Score for competitor in match",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "98"
          },
          "secondaryScore": {
            "description": "Secondary score",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "3v3"
          },
          "isNeutralVenue": {
            "description": "Competitor is playing at a neutral venue ?",
            "type": "boolean",
            "example": true
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "match teams model"
      },
      "Fixture_RosterModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this match roster belongs to",
            "type": "object"
          },
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entity": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entities"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The team information",
            "type": "object"
          },
          "personId": {
            "description": "The unique identifier of the person",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "person": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "persons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The person information",
            "type": "object"
          },
          "bib": {
            "description": "The number displayed on the jersey",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "34"
          },
          "position": {
            "description": "Playing position",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "GOALKEEPER"
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "match roster model"
      },
      "FixturesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this match belongs to",
            "type": "object"
          },
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "practiceDrillType": {
            "description": "Practice types\n>- `DRILL` Drill\n>- `FITNESS` Fitness\n>- `GAME` Practice Game\n>- `OTHER` Other\n",
            "type": "string",
            "enum": [
              "DRILL",
              "GAME",
              "FITNESS",
              "OTHER"
            ],
            "maxLength": 100,
            "example": "DRILL"
          },
          "internationalReference": {
            "description": "The international reference for this match given by the sport governing body",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "CA3243-3"
          },
          "status": {
            "description": "Match status\n>- `ABANDONED` Abandoned\n>- `BYE` Bye\n>- `CANCELLED` Cancelled\n>- `CONFIRMED` Confirmed\n>- `FINISHED` Finished\n>- `IF_NEEDED` If Needed\n>- `IN_PROGRESS` In Progress\n>- `POSTPONED` Postponed\n>- `SCHEDULED` Scheduled\n",
            "type": "string",
            "enum": [
              "SCHEDULED",
              "BYE",
              "IN_PROGRESS",
              "FINISHED",
              "CONFIRMED",
              "POSTPONED",
              "CANCELLED",
              "ABANDONED",
              "IF_NEEDED"
            ],
            "maxLength": 100,
            "default": "SCHEDULED",
            "example": "SCHEDULED"
          },
          "fixtureNumber": {
            "description": "Match number",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 123
          },
          "nameLocal": {
            "description": "The name of the match in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Grand Final"
          },
          "nameLatin": {
            "description": "The name of the match in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Grand Final"
          },
          "startTimeLocal": {
            "description": "Local start time",
            "type": "string",
            "format": "date-time",
            "example": "2018-08-16T18:00:00"
          },
          "startTimeUTC": {
            "description": "Start time (UTC). This is automatically generated based on the timezone of the venue.",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true,
            "example": "2018-08-16T02:00:00"
          },
          "finishRecordingTimeUTC": {
            "description": "Start time (UTC) + durationFull",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-08-16T02:00:00"
          },
          "finishRecordingTimeLocal": {
            "description": "Start time (Local) + durationFull",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-08-16T02:00:00"
          },
          "startTimeActualUTC": {
            "description": "Actual start time (UTC)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2018-08-16T02:02:23"
          },
          "endTimeActualUTC": {
            "description": "Actual end time (UTC)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2018-08-16T04:02:23"
          },
          "timesUnconfirmed": {
            "description": "Is the match time yet to be confirmed ?",
            "type": "boolean",
            "example": true
          },
          "locked": {
            "description": "Is the match locked (to prevent editing)?",
            "type": "boolean",
            "example": true
          },
          "placingIfWon": {
            "description": "Place if Won?",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "placingIfLost": {
            "description": "Place if Lost?",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "attendance": {
            "description": "Crowd attendance",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1123
          },
          "sellout": {
            "description": "Was the match a sellout?",
            "type": "boolean",
            "example": true
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "environmental": {
            "title": "Environmental details",
            "description": "Details about the environment during the fixture",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "surfaceCondition": {
                "description": "Condition of surface",
                "type": "string"
              }
            }
          },
          "duration": {
            "description": "Length, in minutes, of the match",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 48
          },
          "durationFull": {
            "description": "Full duration including breaks",
            "type": "integer",
            "format": "int32",
            "default": 180,
            "nullable": true,
            "example": 180
          },
          "ticketURL": {
            "description": "Ticket URL",
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "stageCode": {
            "description": "A unique code for the stage. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "ST1"
          },
          "stage": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_stages"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "ST1"
              }
            },
            "description": "The stage that is related to this record",
            "type": "object"
          },
          "poolCode": {
            "description": "A unique code for the pool. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "P1"
          },
          "pool": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_pools"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "P1"
              }
            },
            "description": "The pool that is related to this record",
            "type": "object"
          },
          "roundCode": {
            "description": "A unique code for the round. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "RN1"
          },
          "round": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_rounds"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "RN1"
              }
            },
            "description": "The ~ROUND~ that is related to this record",
            "type": "object"
          },
          "roundNumber": {
            "description": "The number given to the round",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": 1
          },
          "liveDataAvailable": {
            "description": "Is live data available?",
            "type": "boolean",
            "example": true
          },
          "liveVideoAvailable": {
            "description": "Is live video available ?",
            "type": "boolean",
            "example": true
          },
          "fixtureType": {
            "description": "Type of match\n>- `ALL_STAR` All Star\n>- `DEMONSTRATION` Demonstration\n>- `FINAL` Final\n>- `FRIENDLY` Friendly\n>- `PLAYOFF` Playoff\n>- `PRESEASON` Pre Season\n>- `REGULAR` Regular\n",
            "type": "string",
            "enum": [
              "ALL_STAR",
              "PRESEASON",
              "REGULAR",
              "FINAL",
              "PLAYOFF",
              "FRIENDLY",
              "DEMONSTRATION"
            ],
            "maxLength": 50,
            "example": "REGULAR"
          },
          "maximumPeriodTypeUsed": {
            "description": "Maximum Period Type Used\n>- `EXTRA_TIME` Extra Time\n>- `OVERTIME` Overtime\n>- `REGULAR` Regular\n",
            "type": "string",
            "enum": [
              "REGULAR",
              "EXTRA_TIME",
              "OVERTIME"
            ],
            "maxLength": 50,
            "example": "REGULAR"
          },
          "competitorType": {
            "description": "The type of competitors in this match\n>- `ENTITY` Entity\n>- `PERSON` Person\n",
            "type": "string",
            "enum": [
              "PERSON",
              "ENTITY"
            ],
            "maxLength": 50,
            "example": "ENTITY"
          },
          "competitors": {
            "type": "array",
            "description": "Array of competitors",
            "additionalProperties": false,
            "items": {
              "type": "object",
              "title": "The competitors Schema",
              "additionalProperties": false,
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "description": "The uuid of the entity",
                  "type": "string"
                },
                "conferenceId": {
                  "description": "The uuid of the conference",
                  "type": "string"
                },
                "divisionId": {
                  "description": "The uuid of the division",
                  "type": "string"
                },
                "includeInConferenceStatistics": {
                  "description": "Include the statistics for this competitors in the conference statistics?",
                  "type": "boolean"
                },
                "isHome": {
                  "description": "Is competitor the home team ?",
                  "type": "boolean"
                },
                "draw": {
                  "description": "Result for this competitor was a draw ?",
                  "type": "boolean"
                },
                "resultStatus": {
                  "description": "Result status",
                  "type": "string",
                  "enum": [
                    "SCHEDULED",
                    "IN_PROGRESS",
                    "CONFIRMED",
                    "DISQUALIFIED",
                    "FORFEITED",
                    "WON_BY_FORFEIT",
                    "DID_NOT_FINISH",
                    "WITHDRAWN",
                    "DID_NOT_START"
                  ]
                },
                "resultPlace": {
                  "description": "Result placing",
                  "type": "number",
                  "nullable": true
                },
                "startingNumber": {
                  "description": "Starting number",
                  "type": "number",
                  "nullable": true
                },
                "score": {
                  "description": "Score for competitor in match",
                  "type": "string",
                  "nullable": true
                },
                "secondaryScore": {
                  "description": "Secondary score",
                  "type": "string",
                  "nullable": true
                },
                "isNeutralVenue": {
                  "description": "Competitor is playing at a neutral venue ?",
                  "type": "boolean"
                },
                "externalId": {
                  "description": "externalId",
                  "type": "string"
                }
              }
            }
          },
          "venueId": {
            "description": "The unique identifier of the venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "venue": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "venues"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The venue that this match belongs to",
            "type": "object"
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "match model"
      },
      "LeaguesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "leagueId": {
            "description": "The unique identifier of the league",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this league belongs to",
            "type": "object"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the league in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the league in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "countryCode": {
            "description": "Country code of the league. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USA"
          },
          "regionType": {
            "description": "How geographically relevant is this league\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
            "type": "string",
            "enum": [
              "LOCAL",
              "STATE",
              "INTERSTATE",
              "NATIONAL",
              "INTERNATIONAL"
            ],
            "example": "STATE"
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "league model"
      },
      "OrganizationsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "b1a23"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the organization in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the organization in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "countryCode": {
            "description": "Country code of the organization. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USA"
          },
          "regionType": {
            "description": "How geographically relevant is this organization\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
            "type": "string",
            "enum": [
              "LOCAL",
              "STATE",
              "INTERSTATE",
              "NATIONAL",
              "INTERNATIONAL"
            ],
            "example": "STATE"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "organization model"
      },
      "Season_StagesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season stage belongs to",
            "type": "object"
          },
          "stageCode": {
            "description": "A unique code for the stage. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "example": "ST1"
          },
          "nameLocal": {
            "description": "The name of the season stage in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the season stage in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "stageOrder": {
            "description": "User defined sort order of the stage",
            "type": "integer",
            "format": "int32",
            "maxLength": 3,
            "nullable": true,
            "example": 1
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "season stage model"
      },
      "Season_PoolsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this pool belongs to",
            "type": "object"
          },
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "poolCode": {
            "description": "A unique code for the pool. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "example": "P1"
          },
          "stageCode": {
            "description": "A unique code for the stage. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "ST1"
          },
          "stage": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_stages"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "ST1"
              }
            },
            "description": "The stage that is related to this record",
            "type": "object"
          },
          "nameLocal": {
            "description": "The name of the pool in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Stage 1"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "S1"
          },
          "nameLatin": {
            "description": "The name of the pool in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Stage 1"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "S1"
          },
          "poolOrder": {
            "description": "User defined sort order of the ~pool~",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "pool model"
      },
      "Season_RosterModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season roster belongs to",
            "type": "object"
          },
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entity": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entities"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The team information",
            "type": "object"
          },
          "entityGroupId": {
            "description": "The club that this team belongs to",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entityGroup": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entity_groups"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The club that this team belongs to",
            "type": "object"
          },
          "divisionId": {
            "description": "The unique identifier of the division",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "division": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "divisions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The division information",
            "type": "object"
          },
          "conferenceId": {
            "description": "The unique identifier of the conference",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "conference": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "conferences"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The conference information",
            "type": "object"
          },
          "personId": {
            "description": "The unique identifier of the person",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "person": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "persons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The person information",
            "type": "object"
          },
          "bib": {
            "description": "The number displayed on the jersey",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "34"
          },
          "position": {
            "description": "Playing position",
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "example": "GOALKEEPER"
          },
          "status": {
            "description": "Participation status\n>- `ACTIVE` Active\n>- `INJURED` Injured\n>- `OTHER_NOT_PARTICIPATING` Other Non-Participation\n>- `OUT` Out\n>- `SUSPENSED` Suspended\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INJURED",
              "OUT",
              "SUSPENSED",
              "OTHER_NOT_PARTICIPATING"
            ],
            "maxLength": 100,
            "example": "ACTIVE"
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "season roster model"
      },
      "Season_RoundsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this round belongs to",
            "type": "object"
          },
          "roundCode": {
            "description": "A unique code for the round. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "example": "RN1"
          },
          "poolCode": {
            "description": "A unique code for the pool. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "P1"
          },
          "pool": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_pools"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "P1"
              }
            },
            "description": "The pool that is related to this record",
            "type": "object"
          },
          "stageCode": {
            "description": "A unique code for the stage. (Unique for season)",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "ST1"
          },
          "stage": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "season_stages"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "ST1"
              }
            },
            "description": "The stage that is related to this record",
            "type": "object"
          },
          "roundNumber": {
            "description": "The number given to the round",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": 1
          },
          "nameLocal": {
            "description": "The name of the round in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Rivalry Round"
          },
          "nameLatin": {
            "description": "The name of the round in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Rivalry Round"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "RR"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "RR"
          },
          "roundOrder": {
            "description": "User defined sort order of the stage",
            "type": "integer",
            "format": "int32",
            "maximum": 999,
            "nullable": true,
            "example": 1
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "round model"
      },
      "SeasonsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season belongs to",
            "type": "object"
          },
          "competitionId": {
            "description": "The unique identitifer of the competition",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "competition": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "competitions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The competition that this season belongs to",
            "type": "object"
          },
          "internationalReference": {
            "description": "The international reference for this season given by the sport governing body",
            "type": "string",
            "maxLength": 30,
            "nullable": true,
            "example": "CA3243-3"
          },
          "eventType": {
            "description": "Primary Type of Matches\n>- `FIXTURE` Fixture\n>- `PRACTICE` Practice\n",
            "type": "string",
            "enum": [
              "FIXTURE",
              "PRACTICE"
            ],
            "maxLength": 30,
            "default": "FIXTURE",
            "example": "FIXTURE"
          },
          "seasonType": {
            "description": "The type of matches added to this season\n>- `ONE_OFF` One off\n>- `SEASON` Season\n>- `TOURNAMENT` Tournament\n",
            "type": "string",
            "enum": [
              "SEASON",
              "TOURNAMENT",
              "ONE_OFF"
            ],
            "maxLength": 30,
            "example": "SEASON"
          },
          "year": {
            "description": "Year of the season",
            "type": "integer",
            "format": "int32",
            "maxLength": 4,
            "example": 2019
          },
          "grade": {
            "description": "The playing grade of the matches in this season",
            "type": "string",
            "maxLength": 50,
            "example": "A"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "ACTIVE"
          },
          "includeInStatistics": {
            "description": "Include this season in calculated statistics?",
            "type": "boolean",
            "example": true
          },
          "nameLocal": {
            "description": "The name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test season"
          },
          "nameLatin": {
            "description": "The name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test season"
          },
          "nameShortLocal": {
            "description": "The abbreviated name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "Test organization"
          },
          "nameShortLatin": {
            "description": "The abbreviated name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "Test organization"
          },
          "startDate": {
            "description": "Season start date",
            "type": "string",
            "format": "date",
            "example": "2016-09-08"
          },
          "endDate": {
            "description": "Season start date",
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2016-09-08"
          },
          "gender": {
            "description": "The gender of the participants in the season\n>- `FEMALE` Female\n>- `MALE` Male\n>- `MIXED` Mixed\n",
            "type": "string",
            "enum": [
              "MIXED",
              "MALE",
              "FEMALE"
            ],
            "maxLength": 20,
            "example": "MALE"
          },
          "ageGroup": {
            "description": "The age group of the season\n>- `JUNIOR` Junior\n>- `MASTERS` Masters\n>- `SENIOR` Senior\n",
            "type": "string",
            "enum": [
              "JUNIOR",
              "SENIOR",
              "MASTERS"
            ],
            "maxLength": 50,
            "example": "SENIOR"
          },
          "standard": {
            "description": "The playing standard of the season\n>- `ELITE` Professional/elite organisation\n>- `FRIENDLY` International Friendly\n>- `GRASS_ROOT` Normal\n>- `INTERNATIONAL` International\n>- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship\n>- `OLYMPIC` Olympics\n>- `REGION` Regional\n>- `TIER2` lesser standard than elite\n>- `TIER3` lesser standard than tier 2\n>- `WORLD_CHAMPIONSHIP` World Championship\n>- `ZONE_CHAMPIONSHIP` International Zone Championship\n",
            "type": "string",
            "enum": [
              "OLYMPIC",
              "WORLD_CHAMPIONSHIP",
              "ZONE_CHAMPIONSHIP",
              "NONCONTINENTAL_CHAMPIONSHIP",
              "FRIENDLY",
              "INTERNATIONAL",
              "REGION",
              "ELITE",
              "TIER2",
              "TIER3",
              "GRASS_ROOT"
            ],
            "maxLength": 50,
            "example": "ELITE"
          },
          "representation": {
            "description": "What level are the competitors representing\n>- `CLUB` Club\n>- `COUNTRY` Country\n>- `PERSON` Person\n>- `REGION` Region\n>- `STATE` State\n",
            "type": "string",
            "enum": [
              "CLUB",
              "STATE",
              "REGION",
              "COUNTRY",
              "PERSON"
            ],
            "maxLength": 50,
            "example": "CLUB"
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "configuration": {
            "title": "Season Configuration",
            "description": "Season Configuration settings",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "periodBreakDuration": {
                "type": "number"
              },
              "halfTimeDuration": {
                "type": "number"
              },
              "shotClockLength": {
                "type": "number"
              },
              "foulsUntilBonus": {
                "type": "number"
              },
              "foulsAllowedPersonal": {
                "type": "number"
              },
              "foulsAllowedTechnical": {
                "type": "number"
              }
            }
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImagesModel"
            }
          }
        },
        "title": "season model"
      },
      "SitesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "siteId": {
            "description": "The unique identifier of the site",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this site belongs to",
            "type": "object"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the site in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the site in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "countryCode": {
            "description": "Country code of the site. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USA"
          },
          "address": {
            "title": "Address schema",
            "description": "Street Address for the site",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "address1": {
                "description": "First line of the address",
                "type": "string",
                "nullable": true
              },
              "address2": {
                "description": "Second line of the address",
                "type": "string",
                "nullable": true
              },
              "address3": {
                "description": "Third line of the address",
                "type": "string",
                "nullable": true
              },
              "city": {
                "description": "The city/suburb of the address",
                "type": "string",
                "nullable": true
              },
              "state": {
                "description": "The state of the address",
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "description": "The postal code for the address",
                "type": "string",
                "nullable": true
              },
              "countryCode": {
                "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                "type": "string",
                "nullable": true,
                "maxLength": 3,
                "minLength": 3
              },
              "longitude": {
                "type": "number",
                "nullable": true
              },
              "latitude": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "site model"
      },
      "Season_Venues_ListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season venues belongs to",
            "type": "object"
          },
          "venueId": {
            "description": "The unique identifier of the venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "siteId": {
            "description": "The site that this season venues belongs to",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "site": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "sites"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The site that this season venues belongs to",
            "type": "object"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the season venues in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "alternateNameLocal": {
            "description": "The alternate name of the venue, in Local Language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test venue"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the season venues in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "alternateNameLatin": {
            "description": "The alternate name of the venue, in Latin characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test venue"
          },
          "countryCode": {
            "description": "Country code of the season venues. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USA"
          },
          "timezone": {
            "description": "Timezone of the venue.  The name of the zone as defined by the IANA TZ database. https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
            "type": "string",
            "maxLength": 150,
            "example": "Australia/Sydney"
          },
          "address": {
            "title": "Address schema",
            "description": "Street Address for the season venues",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "address1": {
                "description": "First line of the address",
                "type": "string",
                "nullable": true
              },
              "address2": {
                "description": "Second line of the address",
                "type": "string",
                "nullable": true
              },
              "address3": {
                "description": "Third line of the address",
                "type": "string",
                "nullable": true
              },
              "city": {
                "description": "The city/suburb of the address",
                "type": "string",
                "nullable": true
              },
              "state": {
                "description": "The state of the address",
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "description": "The postal code for the address",
                "type": "string",
                "nullable": true
              },
              "countryCode": {
                "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                "type": "string",
                "nullable": true,
                "maxLength": 3,
                "minLength": 3
              },
              "longitude": {
                "type": "number",
                "nullable": true
              },
              "latitude": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "season venues model"
      },
      "VenuesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "venueId": {
            "description": "The unique identifier of the venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "siteId": {
            "description": "The site that this venue belongs to",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "site": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "sites"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The site that this venue belongs to",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this venue belongs to",
            "type": "object"
          },
          "abbreviationLocal": {
            "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLocal": {
            "description": "The name of the venue in the [local](#section/Introduction/Character-Sets-and-Names) language",
            "type": "string",
            "maxLength": 150,
            "example": "Test organization"
          },
          "alternateNameLocal": {
            "description": "The alternate name of the venue, in Local Language",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test venue"
          },
          "abbreviationLatin": {
            "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 50,
            "nullable": true,
            "example": "NFA"
          },
          "nameLatin": {
            "description": "The name of the venue in [latin](#section/Introduction/Character-Sets-and-Names) characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test organization"
          },
          "alternateNameLatin": {
            "description": "The alternate name of the venue, in Latin characters",
            "type": "string",
            "maxLength": 150,
            "nullable": true,
            "example": "Test venue"
          },
          "countryCode": {
            "description": "Country code of the venue. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
            "type": "string",
            "minLength": 3,
            "maxLength": 3,
            "nullable": true,
            "example": "USA"
          },
          "timezone": {
            "description": "Timezone of the venue.  The name of the zone as defined by the IANA TZ database. https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
            "type": "string",
            "maxLength": 150,
            "example": "Australia/Sydney"
          },
          "address": {
            "title": "Address schema",
            "description": "Street Address for the venue",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "address1": {
                "description": "First line of the address",
                "type": "string",
                "nullable": true
              },
              "address2": {
                "description": "Second line of the address",
                "type": "string",
                "nullable": true
              },
              "address3": {
                "description": "Third line of the address",
                "type": "string",
                "nullable": true
              },
              "city": {
                "description": "The city/suburb of the address",
                "type": "string",
                "nullable": true
              },
              "state": {
                "description": "The state of the address",
                "type": "string",
                "nullable": true
              },
              "postalCode": {
                "description": "The postal code for the address",
                "type": "string",
                "nullable": true
              },
              "countryCode": {
                "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                "type": "string",
                "nullable": true,
                "maxLength": 3,
                "minLength": 3
              },
              "longitude": {
                "type": "number",
                "nullable": true
              },
              "latitude": {
                "type": "number",
                "nullable": true
              }
            }
          },
          "social": {
            "title": "Social Media",
            "description": "Social Media contacts",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "website": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "http://www.example.com"
              },
              "facebook": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.facebook.com/example"
              },
              "twitter": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.twitter.com/example"
              },
              "wikipedia": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://en.wikipedia.org/wiki/example"
              },
              "instagram": {
                "type": "string",
                "nullable": true,
                "format": "uri",
                "example": "https://www.instagram.com/example"
              }
            }
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "masterVenueId": {
            "description": "The unique identifier of the master venue",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "venue model"
      },
      "SuccessModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "success": {
            "description": "Was the call a success?",
            "type": "boolean",
            "example": true
          }
        },
        "title": " model"
      },
      "Video_SubscriptionsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "subscriptionId": {
            "description": "The unique identifier of the video stream subscription",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this video subscription belongs to",
            "type": "object"
          },
          "customerId": {
            "description": "Customer of the subscription",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "provider": {
            "description": "The code for the provider of the file",
            "type": "string",
            "maxLength": 100,
            "example": "Test Provider"
          },
          "locale": {
            "description": "The locale of the video",
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "fr_FR"
          },
          "sourceNumber": {
            "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "feedType": {
            "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
            "type": "string",
            "enum": [
              "PRIMARY",
              "ADDITIONAL_ANGLE",
              "LOW_LATENCY"
            ],
            "maxLength": 30,
            "example": "PRIMARY"
          },
          "outputResolution": {
            "description": "The resolution that you want to receive the video in.  This is only valid if outputFormat is `RTMP`.  If outputFormat is not `RTMP` then the output resolution is the same as the input resolution.  If specified the output resolution cannot be higher than the input resolution. You must have specific permission to chose anything other than 720p or 1080p.\n>- `1080` 1920 x 1080\n>- `1280x720@2000k` 1280x720@2000k\n>- `1920x1080@4000k` 1920x1080@4000k\n>- `640x320@850k` 640x320@850k\n>- `720` 1280 x 720\n>- `DESKTOP_384x216@280k` DESKTOP_384x216@280k\n>- `DESKTOP_512x288@500k` DESKTOP_512x288@500k\n>- `DESKTOP_768x432@1000k` DESKTOP_768x432@1000k\n>- `MOBILE_320x180@102k` MOBILE_320x180@102k\n>- `MOBILE_320x180@232k` MOBILE_320x180@232k\n>- `MOBILE_480x270@464k` MOBILE_480x270@464k\n>- `MOBILE_768x432@1000k` MOBILE_768x432@1000k\n",
            "type": "string",
            "enum": [
              "720",
              "1080",
              "DESKTOP_768x432@1000k",
              "DESKTOP_512x288@500k",
              "DESKTOP_384x216@280k",
              "MOBILE_768x432@1000k",
              "MOBILE_480x270@464k",
              "MOBILE_320x180@232k",
              "MOBILE_320x180@102k",
              "1920x1080@4000k",
              "1280x720@2000k",
              "640x320@850k"
            ],
            "maxLength": 30,
            "example": "720"
          },
          "outputFormat": {
            "description": "The output format\n>- `HLS` HLS\n>- `RTMP` RTMP\n>- `RTMP_PULL` RTMP Pull\n",
            "type": "string",
            "enum": [
              "RTMP",
              "RTMP_PULL",
              "HLS"
            ],
            "maxLength": 30,
            "example": "RTMP"
          },
          "streamName": {
            "description": "The name of the RTMP stream",
            "type": "string",
            "maxLength": 250
          },
          "subscriptionName": {
            "description": "The name of the subscription",
            "type": "string",
            "maxLength": 250
          },
          "outputURL": {
            "description": "The URL to send the output to. Only valid if outputFormat = 'RTMP'",
            "type": "string",
            "maxLength": 200,
            "example": "rtmp://rtmp-api.facebook.com:80/rtmp/?340ur0JHKJ0398hjkh387HKJD9"
          },
          "audio": {
            "description": "Audio\n>- `AMBIENCE` Only ambience / crowd noise\n>- `BOTH` Both combined\n>- `BOTH_SPLIT_LR` Both (Ambience left channel, Commentary right channel)\n>- `COMMENTARY` Only commentary\n",
            "type": "string",
            "enum": [
              "COMMENTARY",
              "AMBIENCE",
              "BOTH",
              "BOTH_SPLIT_LR"
            ],
            "maxLength": 30,
            "default": "BOTH",
            "example": "COMMENTARY"
          },
          "content": {
            "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
            "type": "string",
            "enum": [
              "CLEAN",
              "PROGRAM"
            ],
            "maxLength": 30,
            "example": "CLEAN"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "video subscription model"
      },
      "Video_FilesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "videoId": {
            "description": "The unique identifier of the video",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this video file belongs to",
            "type": "object"
          },
          "provider": {
            "description": "The code for the provider of the file",
            "type": "string",
            "maxLength": 100,
            "example": "Test Provider"
          },
          "locale": {
            "description": "The locale of the video",
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "fr_FR"
          },
          "sourceNumber": {
            "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "resolution": {
            "description": "The resolution of the video input\n>- `1080` 1920 x 1080\n>- `720` 1280 x 720\n",
            "type": "string",
            "enum": [
              "720",
              "1080"
            ],
            "maxLength": 30,
            "example": "720"
          },
          "name": {
            "description": "The name/description of the video file",
            "type": "string",
            "maxLength": 200
          },
          "feedType": {
            "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
            "type": "string",
            "enum": [
              "PRIMARY",
              "ADDITIONAL_ANGLE",
              "LOW_LATENCY"
            ],
            "maxLength": 30,
            "example": "PRIMARY"
          },
          "content": {
            "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
            "type": "string",
            "enum": [
              "CLEAN",
              "PROGRAM"
            ],
            "maxLength": 30,
            "example": "CLEAN"
          },
          "fps": {
            "description": "fps for the video stream",
            "type": "integer",
            "format": "int32",
            "default": 25,
            "example": 25
          },
          "origin": {
            "description": "The origin of the video file\n>- `STREAM` Streamed\n>- `UPLOAD` Uploaded\n>- `VENUE` Recorded in venue\n",
            "type": "string",
            "enum": [
              "STREAM",
              "VENUE",
              "UPLOAD"
            ],
            "maxLength": 30,
            "example": "STREAM"
          },
          "format": {
            "description": "The format of the video file\n>- `HLS` A HLS play list\n>- `MP4` One MP4 file\n",
            "type": "string",
            "enum": [
              "HLS",
              "MP4"
            ],
            "maxLength": 30,
            "example": "HLS"
          },
          "size": {
            "description": "Size (Mb) of the video (only given if a single file)",
            "type": "number",
            "format": "float",
            "nullable": true,
            "example": 1024.2
          },
          "length": {
            "description": "Lenth (mins) of the video",
            "type": "number",
            "format": "float",
            "nullable": true,
            "example": 123.4
          },
          "encoding": {
            "description": "How is the video/audio encoded. codecs etc.",
            "type": "string",
            "maxLength": 30,
            "example": "H.264/AAC"
          },
          "status": {
            "description": "What is the status of the file?\n>- `AVAILABLE` Available for access\n>- `BUILDABLE` Not currently available - but can be built on request\n>- `PENDING` Being added - some parts may be available\n",
            "type": "string",
            "enum": [
              "AVAILABLE",
              "BUILDABLE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "AVAILABLE"
          },
          "startTime": {
            "description": "The time this recording started (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "expiry": {
            "description": "When does this file expire? (UTC)",
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "video file model"
      },
      "Video_Files_DownloadModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "videoId": {
            "description": "The unique identifier of the video",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "url": {
            "description": "The URL where the file can be found",
            "type": "string",
            "maxLength": 200,
            "readOnly": true,
            "example": "https://hls.host.com/video/index.m3u8"
          }
        },
        "title": "video file model"
      },
      "ImagesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "imageId": {
            "description": "The unique identifier of the image record",
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this images belongs to",
            "type": "object"
          },
          "baseType": {
            "description": "The object that this image relates to\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "type": "string",
            "enum": [
              "PERSON",
              "ENTITY",
              "ENTITYGROUP",
              "COMPETITION",
              "SEASON",
              "LEAGUE",
              "ORGANIZATION",
              "DIVISION",
              "CONFERENCE"
            ],
            "maxLength": 100,
            "example": "entity"
          },
          "baseId": {
            "description": "The unique identifier of the object associated with this image's record. If the `baseType` is `PERSON` then this would be the value of `personId`.",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fileType": {
            "description": "The type of file\n>- `JPG` jpg\n>- `PNG` png\n>- `SVG` svg\n",
            "type": "string",
            "enum": [
              "JPG",
              "PNG",
              "SVG"
            ],
            "maxLength": 3,
            "readOnly": true,
            "example": "png"
          },
          "imageType": {
            "description": "Upload Type\n>- `LOGO` Logo - Not valid for 'PERSON' baseType\n>- `LOGO_BACKGROUND` Stylised logo for background purposes - Not valid for 'PERSON' baseType\n>- `PERSON_HEAD` Head shot (shoulders and head) - Only valid for 'PERSON' baseType\n>- `PERSON_POSE` Person posing - Only valid for 'PERSON' baseType\n>- `PERSON_WAIST` Head shot from the waist up - Only valid for 'PERSON' baseType\n",
            "type": "string",
            "enum": [
              "LOGO",
              "LOGO_BACKGROUND",
              "PERSON_HEAD",
              "PERSON_WAIST",
              "PERSON_POSE"
            ],
            "maxLength": 100,
            "example": "LOGO"
          },
          "secondaryType": {
            "description": "If the image relates to a secondary object. Such as a photo of a person in a team, then baseType would be PERSON and secondaryType would be TEAM.\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `SEASON` Season\n",
            "type": "string",
            "enum": [
              "ENTITY",
              "ENTITYGROUP",
              "COMPETITION",
              "SEASON",
              "LEAGUE",
              "DIVISION",
              "CONFERENCE"
            ],
            "maxLength": 100,
            "example": "entity"
          },
          "secondaryId": {
            "description": "The unique identifier of the object associated with the secondaryType",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "rating": {
            "description": "The rating given to the quality of the image.  All images are LOW by default but are set ad MEDIUM if they are large enough and have transparency.  Images are only marked as HIGH if they have been manually reviewed.  You should take your use-case into account when you go to use the image.\n>- `HIGH` High\n>- `LOW` Low\n>- `MEDIUM` Medium\n",
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH"
            ],
            "maxLength": 100,
            "readOnly": true,
            "example": "LOW"
          },
          "url": {
            "description": "The URL of the image. See [Images](#section/Introduction/Images) for more information.",
            "type": "string",
            "readOnly": true
          },
          "maximumHeight": {
            "description": "The maximum height (in pixels) of this image.",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 200
          },
          "maximumWidth": {
            "description": "The maximum width (in pixels) of this image.",
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 200
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "images model"
      },
      "Season_Entities_ListModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season entities belongs to",
            "type": "object"
          },
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entity": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entities"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The team information",
            "type": "object"
          },
          "conferenceId": {
            "description": "The unique identifier of the conference",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "conference": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "conferences"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The conference information",
            "type": "object"
          },
          "divisionId": {
            "description": "The unique identifier of the division",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "division": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "divisions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The division information",
            "type": "object"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "ACTIVE"
          },
          "seed": {
            "description": "Initial seeding",
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "season entities model"
      },
      "Season_EntitiesModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "seasonId": {
            "description": "The unique identitifer of the season",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "season": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "seasons"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The season linked to this record",
            "type": "object"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this season teams belongs to",
            "type": "object"
          },
          "entityId": {
            "description": "The unique identifier of the team",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "entity": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "entities"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The team information",
            "type": "object"
          },
          "conferenceId": {
            "description": "The unique identifier of the conference",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "conference": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "conferences"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The conference information",
            "type": "object"
          },
          "divisionId": {
            "description": "The unique identifier of the division",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "division": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "divisions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The division information",
            "type": "object"
          },
          "status": {
            "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "PENDING"
            ],
            "maxLength": 30,
            "example": "ACTIVE"
          },
          "seed": {
            "description": "Initial seeding",
            "type": "integer",
            "format": "int32",
            "maxLength": 3,
            "nullable": true,
            "example": 1
          },
          "externalId": {
            "description": "The Id of the data as set by the provider of the data",
            "type": "string",
            "maxLength": 150,
            "pattern": "^[0-9A-Za-z/_]+$",
            "nullable": true,
            "example": "A123"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "season teams model"
      },
      "Video_Stream_InputsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "videoInputId": {
            "description": "The unique identifier of the video input",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "masterVenueId": {
            "description": "The unique identifier of the master venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this Video Stream Inputs belongs to",
            "type": "object"
          },
          "venueId": {
            "description": "The unique identifier of the venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "venue": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "venues"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The venue that this match belongs to",
            "type": "object"
          },
          "competitionId": {
            "description": "The unique identitifer of the competition",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "competition": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "competitions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The competition that this season belongs to",
            "type": "object"
          },
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "startTimeLocal": {
            "description": "Start time (Local).",
            "type": "string",
            "format": "date-time",
            "example": "2018-08-16T02:00:00"
          },
          "startTimeUTC": {
            "description": "Start time (UTC). This is automatically generated based on the timezone of the venue.",
            "type": "string",
            "format": "date-time",
            "example": "2018-08-16T02:00:00"
          },
          "finishRecordingTimeUTC": {
            "description": "Finish Recording time of the stream (if not set, is calculated as startTimeUTC + durationFull from matches)",
            "type": "string",
            "format": "date-time",
            "maxLength": 200
          },
          "provider": {
            "description": "The code for the provider of the file",
            "type": "string",
            "maxLength": 100,
            "example": "Test Provider"
          },
          "locale": {
            "description": "The locale of the video",
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "fr_FR"
          },
          "sourceNumber": {
            "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "feedType": {
            "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
            "type": "string",
            "enum": [
              "PRIMARY",
              "ADDITIONAL_ANGLE",
              "LOW_LATENCY"
            ],
            "maxLength": 30,
            "example": "PRIMARY"
          },
          "inputResolution": {
            "description": "The resolution of the video input\n>- `1080` 1920 x 1080\n>- `720` 1280 x 720\n",
            "type": "string",
            "enum": [
              "720",
              "1080"
            ],
            "maxLength": 30,
            "example": "720"
          },
          "name": {
            "description": "The name of the video source",
            "type": "string",
            "maxLength": 200
          },
          "audioAmbienceChannel": {
            "description": "audioAmbienceChannel\n>- `CHANNEL_BOTH` Both channels\n>- `CHANNEL_LEFT` Channel left\n>- `CHANNEL_RIGHT` Channel right\n>- `NONE` None\n",
            "type": "string",
            "enum": [
              "CHANNEL_LEFT",
              "CHANNEL_RIGHT",
              "CHANNEL_BOTH",
              "NONE"
            ],
            "maxLength": 30,
            "example": "CHANNEL_BOTH"
          },
          "audioCommentaryChannel": {
            "description": "audioCommentaryChannel\n>- `CHANNEL_BOTH` Both channels\n>- `CHANNEL_LEFT` Channel left\n>- `CHANNEL_RIGHT` Channel right\n>- `NONE` None\n",
            "type": "string",
            "enum": [
              "CHANNEL_LEFT",
              "CHANNEL_RIGHT",
              "CHANNEL_BOTH",
              "NONE"
            ],
            "maxLength": 30,
            "example": "CHANNEL_BOTH"
          },
          "inputURL": {
            "description": "The URL where the video should be sent",
            "type": "string",
            "example": "rtmp://1ejcn5c-4wmytr5.vi.atriumsports.com/inputin1/inputin1"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "Video Stream Inputs model"
      },
      "Video_Stream_OutputsModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "videoInputId": {
            "description": "The unique identifier of the video input",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "masterVenueId": {
            "description": "The unique identifier of the master venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this Video Stream Outputs belongs to",
            "type": "object"
          },
          "venueId": {
            "description": "The unique identifier of the venue",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "venue": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "venues"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The venue that this match belongs to",
            "type": "object"
          },
          "competitionId": {
            "description": "The unique identitifer of the competition",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "competition": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "competitions"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The competition that this season belongs to",
            "type": "object"
          },
          "fixtureId": {
            "description": "The unique identifier of the match",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "fixture": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "fixtures"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
              }
            },
            "description": "The match",
            "type": "object"
          },
          "provider": {
            "description": "The code for the provider of the file",
            "type": "string",
            "maxLength": 100,
            "example": "Test Provider"
          },
          "locale": {
            "description": "The locale of the video",
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "example": "fr_FR"
          },
          "sourceNumber": {
            "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
            "type": "integer",
            "format": "int32",
            "default": 1,
            "example": 1
          },
          "feedType": {
            "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
            "type": "string",
            "enum": [
              "PRIMARY",
              "ADDITIONAL_ANGLE",
              "LOW_LATENCY"
            ],
            "maxLength": 30,
            "example": "PRIMARY"
          },
          "inputResolution": {
            "description": "The resolution of the video input\n>- `1080` 1920 x 1080\n>- `720` 1280 x 720\n",
            "type": "string",
            "enum": [
              "720",
              "1080"
            ],
            "maxLength": 30,
            "example": "720"
          },
          "name": {
            "description": "The name of the video source",
            "type": "string",
            "maxLength": 200,
            "example": "Automated Capture Feed"
          },
          "content": {
            "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
            "type": "string",
            "enum": [
              "CLEAN",
              "PROGRAM"
            ],
            "maxLength": 30,
            "example": "CLEAN"
          },
          "updated": {
            "description": "Date/time last modified. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "audioAmbience": {
            "description": "Audio Ambience",
            "type": "boolean",
            "example": true
          },
          "audioCommentary": {
            "description": "Audio Commentary",
            "type": "boolean",
            "example": true
          }
        },
        "title": "Video Stream Outputs model"
      },
      "Change_LogModel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "organizationId": {
            "description": "The unique identifier of the organization",
            "type": "string",
            "readOnly": true,
            "example": "9"
          },
          "organization": {
            "properties": {
              "resourceType": {
                "type": "string",
                "enum": [
                  "organizations"
                ]
              },
              "id": {
                "description": "Unique identifier for this resource",
                "type": "string",
                "example": "9"
              }
            },
            "description": "The organization that this change_log belongs to",
            "type": "object"
          },
          "changeType": {
            "description": "The type of change\n>- `delete` Record Deleted\n>- `update` Record Updated\n",
            "type": "string",
            "enum": [
              "delete",
              "update"
            ],
            "example": "delete"
          },
          "primaryType": {
            "description": "The primary table changed",
            "type": "string",
            "maxLength": 30,
            "example": "fixtures"
          },
          "primaryId": {
            "description": "The unique identifier of the primaryType",
            "type": "string",
            "format": "uuid",
            "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
          },
          "childType": {
            "description": "The child table changed",
            "type": "string",
            "maxLength": 30,
            "example": "fixture_roster"
          },
          "added": {
            "description": "Date/time added. In UTC",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "title": "change_log model"
      }
    },
    "parameters": {
      "limit": {
        "name": "limit",
        "description": "The maximum number of records to return. See [Pagination](#section/Introduction/Pagination) for more information.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "maximum": 200,
          "minimum": 1,
          "default": 10,
          "example": 10
        },
        "required": false,
        "in": "query"
      },
      "offset": {
        "name": "offset",
        "description": "The offset of the records. See [Pagination](#section/Introduction/Pagination) for more information.",
        "schema": {
          "type": "integer",
          "format": "int32",
          "example": 10
        },
        "required": false,
        "in": "query"
      },
      "include": {
        "name": "include",
        "description": "A comma separated list of resource types to include. See [Resource Inclusion](#section/Introduction/Resource-Inclusion) for more information.",
        "schema": {
          "type": "string",
          "example": "organizations,fixtures,entities"
        },
        "required": false,
        "in": "query"
      },
      "external": {
        "name": "external",
        "description": "A comma separated list of fields that will instead be interpreted as an externalId. See [External Ids](#section/Introduction/External-Ids) for more information.",
        "schema": {
          "type": "string",
          "example": "entityId,personId"
        },
        "required": false,
        "in": "query"
      },
      "fields": {
        "name": "fields",
        "description": "A comma separated list of fields to display.  The response will only display these fields. See [Partial Response](#section/Partial-Response) section for more information.",
        "schema": {
          "type": "string",
          "example": "dob,firstName,organization(id),organizations[name], teams[name,details/metrics/*,tags(id)]"
        },
        "required": false,
        "in": "query"
      },
      "forceDelete": {
        "name": "forceDelete",
        "description": "Force a delete command to run and delete child records as well if there are existing records depending on the record.",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "hideNull": {
        "name": "hideNull",
        "description": "Don't display data fields with null values or empty structures",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "isPlayer": {
        "name": "isPlayer",
        "description": "Is the person a player?",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "in": "query"
      },
      "isHome": {
        "name": "isHome",
        "description": "Is competitor the home team ?",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "in": "query"
      },
      "isTeamOfficial": {
        "name": "isTeamOfficial",
        "description": "Is the person a team official?",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "in": "query"
      },
      "starter": {
        "name": "starter",
        "description": "Is the person a starter in the match ?",
        "schema": {
          "type": "boolean"
        },
        "required": false,
        "in": "query"
      },
      "organizationId": {
        "name": "organizationId",
        "description": "The unique identifier of the organization",
        "schema": {
          "type": "string",
          "minLength": 5,
          "maxLength": 5,
          "example": "b1a23"
        },
        "required": false,
        "in": "query"
      },
      "transferId": {
        "name": "transferId",
        "description": "The unique identifier of the transfer record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "videoInputId": {
        "name": "videoInputId",
        "description": "The unique identifier of the video input record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "standingId": {
        "name": "standingId",
        "description": "The unique identifier of the standing record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "fromEntityId": {
        "name": "fromEntityId",
        "description": "The unique identifier of the from record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "toEntityId": {
        "name": "toEntityId",
        "description": "The unique identifier of the to record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "fromPersonId": {
        "name": "fromPersonId",
        "description": "The unique identifier of the from record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "toPersonId": {
        "name": "toPersonId",
        "description": "The unique identifier of the to record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "awardId": {
        "name": "awardId",
        "description": "The unique identifier of the award",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "personId": {
        "name": "personId",
        "description": "The unique identifier of the person",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "leagueId": {
        "name": "leagueId",
        "description": "The unique identifier of the league",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "competitionId": {
        "name": "competitionId",
        "description": "The unique identifier of the competition",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "divisionId": {
        "name": "divisionId",
        "description": "The unique identifier of the division",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "conferenceId": {
        "name": "conferenceId",
        "description": "The unique identifier of the division",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "entityId": {
        "name": "entityId",
        "description": "The unique identifier of the entity",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "entityGroupId": {
        "name": "entityGroupId",
        "description": "The unique identifier of the entity group",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "seasonId": {
        "name": "seasonId",
        "description": "The unique identifier of the season",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "masterVenueId": {
        "name": "masterVenueId",
        "description": "The unique identifier of the master venue",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "masterSiteId": {
        "name": "masterSiteId",
        "description": "The unique identifier of the master site",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "venueId": {
        "name": "venueId",
        "description": "The unique identifier of the venue",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "siteId": {
        "name": "siteId",
        "description": "The unique identifier of the site",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "fixtureId": {
        "name": "fixtureId",
        "description": "The unique identifier of the fixture",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "roleId": {
        "name": "roleId",
        "description": "The unique identifier of the role",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "eventId": {
        "name": "eventId",
        "description": "The unique identifier of an event in a match",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "period": {
        "name": "period",
        "description": "The period",
        "schema": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "required": false,
        "in": "query"
      },
      "periodType": {
        "name": "periodType",
        "description": "The type of period\n>- `OVERTIME` Over-time\n>- `REGULAR` Regular\n",
        "schema": {
          "type": "string",
          "enum": [
            "REGULAR",
            "OVERTIME"
          ],
          "example": "REGULAR"
        },
        "required": false,
        "in": "query"
      },
      "section": {
        "name": "section",
        "description": "The section of the period (sub-period)",
        "schema": {
          "type": "string",
          "maxLength": 100
        },
        "required": false,
        "in": "query"
      },
      "fixtureType": {
        "name": "fixtureType",
        "description": "Type of Fixture\n>- `ALL_STAR` All Star\n>- `FINAL` Final\n>- `FRIENDLY` Friendly\n>- `PLAYOFF` Playoff\n>- `PRESEASON` Pre Season\n>- `REGULAR` Regular\n",
        "schema": {
          "type": "string",
          "enum": [
            "ALL_STAR",
            "PRESEASON",
            "REGULAR",
            "FINAL",
            "PLAYOFF",
            "FRIENDLY"
          ],
          "maxLength": 50,
          "example": "REGULAR"
        },
        "required": false,
        "in": "query"
      },
      "winLoss": {
        "name": "winLoss",
        "description": "What the result was\n>- `DRAW` Draw\n>- `LOSS` Loss\n>- `WIN` Win\n",
        "schema": {
          "type": "string",
          "enum": [
            "WIN",
            "LOSS",
            "DRAW"
          ],
          "maxLength": 50
        },
        "required": false,
        "in": "query"
      },
      "homeAway": {
        "name": "homeAway",
        "description": "Where the result was\n>- `AWAY` Away\n>- `HOME` Home\n",
        "schema": {
          "type": "string",
          "enum": [
            "HOME",
            "AWAY"
          ],
          "maxLength": 50
        },
        "required": false,
        "in": "query"
      },
      "countryCode": {
        "name": "countryCode",
        "description": "Country code",
        "schema": {
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "example": "USA"
        },
        "required": false,
        "in": "query"
      },
      "regionType": {
        "name": "regionType",
        "description": "The region type\n>- `INTERNATIONAL` Multiple countries\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
        "schema": {
          "type": "string",
          "enum": [
            "LOCAL",
            "STATE",
            "NATIONAL",
            "INTERNATIONAL"
          ],
          "example": "STATE"
        },
        "required": false,
        "in": "query"
      },
      "gender": {
        "name": "gender",
        "description": "The gender of the season\n>- `FEMALE` Female\n>- `MALE` Male\n>- `MIXED` Mixed\n",
        "schema": {
          "type": "string",
          "enum": [
            "MIXED",
            "MALE",
            "FEMALE"
          ],
          "example": "MALE"
        },
        "required": false,
        "in": "query"
      },
      "persongender": {
        "name": "gender",
        "description": "The gender of the person\n>- `FEMALE` Female\n>- `MALE` Male\n",
        "schema": {
          "type": "string",
          "enum": [
            "MALE",
            "FEMALE"
          ],
          "example": "MALE"
        },
        "required": false,
        "in": "query"
      },
      "personstatus": {
        "name": "status",
        "description": "Status\n>- `ACTIVE` Active\n>- `PENDING` Pending\n>- `UNREGISTERED` UnRegistered\n",
        "schema": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "UNREGISTERED",
            "PENDING"
          ],
          "example": "ACTIVE"
        },
        "required": false,
        "in": "query"
      },
      "ageGroup": {
        "name": "ageGroup",
        "description": "The age group of the season\n>- `JUNIOR` Below 18\n>- `MASTERS` More senior - 40+\n>- `SENIOR` Adult - 18+\n",
        "schema": {
          "type": "string",
          "enum": [
            "JUNIOR",
            "SENIOR",
            "MASTERS"
          ],
          "example": "SENIOR"
        },
        "required": false,
        "in": "query"
      },
      "standard": {
        "name": "standard",
        "description": "The playing standard of the season\n>- `ELITE` Professional/elite organisation\n>- `FRIENDLY` International Friendly\n>- `GRASS_ROOT` Normal\n>- `INTERNATIONAL` International\n>- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship\n>- `OLYMPIC` Olympics\n>- `REGION` Regional\n>- `TIER2` lesser standard than elite\n>- `TIER3` lesser standard than tier 2\n>- `WORLD_CHAMPIONSHIP` World Championship\n>- `ZONE_CHAMPIONSHIP` International Zone Championship\n",
        "schema": {
          "type": "string",
          "enum": [
            "OLYMPIC",
            "WORLD_CHAMPIONSHIP",
            "ZONE_CHAMPIONSHIP",
            "NONCONTINENTAL_CHAMPIONSHIP",
            "FRIENDLY",
            "INTERNATIONAL",
            "REGION",
            "ELITE",
            "TIER2",
            "TIER3",
            "GRASS_ROOT"
          ],
          "example": "ELITE"
        },
        "required": false,
        "in": "query"
      },
      "representation": {
        "name": "representation",
        "description": "What level are the competitors representing\n>- `CLUB` Club\n>- `COUNTRY` Country\n>- `PERSON` Person\n",
        "schema": {
          "type": "string",
          "enum": [
            "CLUB",
            "COUNTRY",
            "PERSON"
          ],
          "example": "CLUB"
        },
        "required": false,
        "in": "query"
      },
      "seasonType": {
        "name": "seasonType",
        "description": "The type of matches added to this season\n>- `ONE_OFF` One off match\n>- `SEASON` Season\n>- `TOURNAMENT` Tournament\n",
        "schema": {
          "type": "string",
          "enum": [
            "SEASON",
            "TOURNAMENT",
            "ONE_OFF"
          ],
          "example": "SEASON"
        },
        "required": false,
        "in": "query"
      },
      "status": {
        "name": "status",
        "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
        "schema": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "PENDING"
          ],
          "example": "ACTIVE"
        },
        "required": false,
        "in": "query"
      },
      "fixtureStatus": {
        "name": "status",
        "description": "Fixture status\n>- `ABANDONED` Abandoned\n>- `BYE` Bye\n>- `CANCELLED` Cancelled\n>- `CONFIRMED` Confirmed\n>- `FINISHED` Finished\n>- `IF_NEEDED` If Needed\n>- `IN_PROGRESS` In Progress\n>- `POSTPONED` Postponed\n>- `SCHEDULED` Scheduled\n",
        "schema": {
          "type": "string",
          "enum": [
            "SCHEDULED",
            "BYE",
            "IN_PROGRESS",
            "FINISHED",
            "CONFIRMED",
            "POSTPONED",
            "CANCELLED",
            "ABANDONED",
            "IF_NEEDED"
          ],
          "example": "SCHEDULED"
        },
        "required": false,
        "in": "query"
      },
      "updated": {
        "name": "updated",
        "description": "Record was modified after this date/time. In UTC.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T02:11:48"
        },
        "required": false,
        "in": "query"
      },
      "added": {
        "name": "added",
        "description": "Record was added after this date/time. In UTC.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T02:10:48"
        },
        "required": false,
        "in": "query"
      },
      "startDate": {
        "name": "startDate",
        "description": "startDate on or after this date",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2018-08-16"
        },
        "required": false,
        "in": "query"
      },
      "endDate": {
        "name": "endDate",
        "description": "endDate on or before this date",
        "schema": {
          "type": "string",
          "format": "date",
          "example": "2018-08-16"
        },
        "required": false,
        "in": "query"
      },
      "nationality": {
        "name": "nationality",
        "description": "A 3 letter nationality code",
        "schema": {
          "type": "string",
          "minLength": 3,
          "maxLength": 3,
          "example": "AUS"
        },
        "required": false,
        "in": "query"
      },
      "locked": {
        "name": "locked",
        "description": "Is the match locked (to prevent editing)?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "timesUnconfirmed": {
        "name": "timesUnconfirmed",
        "description": "Is the match time yet to be confirmed ?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "liveDataAvailable": {
        "name": "liveDataAvailable",
        "description": "Is live data available?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "liveVideoAvailable": {
        "name": "liveVideoAvailable",
        "description": "Is live video available ?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "competitorType": {
        "name": "competitorType",
        "description": "The type of competitors in this fixture\n>- `ENTITY` Entity\n>- `PERSON` Person\n",
        "schema": {
          "type": "string",
          "enum": [
            "PERSON",
            "ENTITY"
          ],
          "example": "PERSON"
        },
        "required": false,
        "in": "query"
      },
      "poolCode": {
        "name": "poolCode",
        "description": "The pool identifier within a season",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "P1"
        },
        "required": false,
        "in": "query"
      },
      "stageCode": {
        "name": "stageCode",
        "description": "The stage identifier within a season",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "ST1"
        },
        "required": false,
        "in": "query"
      },
      "seriesCode": {
        "name": "seriesCode",
        "description": "The series identifier within a season",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "WC1"
        },
        "required": false,
        "in": "query"
      },
      "roundCode": {
        "name": "roundCode",
        "description": "The round identifier within a season",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "RN1"
        },
        "required": false,
        "in": "query"
      },
      "roundNumber": {
        "name": "roundNumber",
        "description": "Round number",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": 1
        },
        "required": false,
        "in": "query"
      },
      "fromTimeLocal": {
        "name": "fromTimeLocal",
        "description": "Where match start time (in local time) >= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "toTimeLocal": {
        "name": "toTimeLocal",
        "description": "Where match start time (in local time) <= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "fromTimeUTC": {
        "name": "fromTimeUTC",
        "description": "Where match start time (in UTC) >= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "toTimeUTC": {
        "name": "toTimeUTC",
        "description": "Where match start time (in UTC) <= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "dateFromStart": {
        "name": "dateFromStart",
        "description": "Where dateFrom >= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "dateFromEnd": {
        "name": "dateFromEnd",
        "description": "Where dateFrom <= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "dateToStart": {
        "name": "dateToStart",
        "description": "Where dateTo >= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "dateToEnd": {
        "name": "dateToEnd",
        "description": "Where dateTo <= this value",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T18:00:00"
        },
        "required": false,
        "in": "query"
      },
      "role": {
        "name": "role",
        "description": "Role\n>- `CAPTAIN` Captain\n>- `CAPTAIN_VICE` Vice Captain\n>- `CEO` CEO\n>- `COACH` Coach\n>- `COACH_ASSISTANT` Assistant Coach\n>- `COACH_ASSISTANT_HEAD` Assistant Head Coach\n>- `COACH_ASSOCIATE_HEAD` Associate Head Coach\n>- `COACH_DEVELOPMENT` Development Coach\n>- `COACH_HEAD` Head Coach\n>- `COACH_HEAD_INTERIM` Interim Head Coach\n>- `COACH_OTHER` Other coaching staff\n>- `COACH_SC` Strengh and Conditioning Coach\n>- `COACH_SENIOR` Senior Coach\n>- `COACH_SPECIALIST` Specialist Coach\n>- `COMMISSIONER` Commissioner\n>- `COMMITTEE` Committee\n>- `CREW_CHIEF` Crew Chief\n>- `DIRECTOR` Director\n>- `DOCTOR` Doctor\n>- `GENERAL` General\n>- `GROUNDSKEEPER` Groundskeeper\n>- `MANAGER` Manager\n>- `MATCH_OFFICIAL` Match Official\n>- `MEDICAL_STAFF` Medical Staff\n>- `OTHER` Other\n>- `PHYSIOTHERAPIST` Physiotherapist\n>- `PRESIDENT` President\n>- `PRESIDENT_VICE` Vice President\n>- `REFEREE` Referee\n>- `REFEREE_ASSISTANT` Referee Assistant\n>- `REFEREE_ASSISTANT_RESERVE` Reserve Assistant Referee\n>- `REFEREE_RESERVE` Reserve Referee\n>- `SCOREKEEPER` Scorekeeper\n>- `SCOREKEEPER_ASSISTANT` Assistant Scorekeeper\n>- `SECRETARY` Secretary\n>- `STATISTICIAN` Statistician\n>- `TIMEKEEPER` Timekeeper\n>- `TRAINER` Trainer\n>- `TRAINER_ASSISTANT` Assitant Trainer\n>- `TREASURER` Treasurer\n>- `UMPIRE` Umpire\n",
        "schema": {
          "type": "string",
          "enum": [
            "COACH",
            "COACH_HEAD",
            "COACH_HEAD_INTERIM",
            "COACH_ASSISTANT",
            "COACH_ASSISTANT_HEAD",
            "COACH_ASSOCIATE_HEAD",
            "COACH_SC",
            "COACH_SENIOR",
            "COACH_DEVELOPMENT",
            "COACH_SPECIALIST",
            "COACH_OTHER",
            "CAPTAIN",
            "CAPTAIN_VICE",
            "DOCTOR",
            "PHYSIOTHERAPIST",
            "MEDICAL_STAFF",
            "TRAINER",
            "TRAINER_ASSISTANT",
            "MATCH_OFFICIAL",
            "COMMISSIONER",
            "STATISTICIAN",
            "SCOREKEEPER",
            "SCOREKEEPER_ASSISTANT",
            "TIMEKEEPER",
            "GROUNDSKEEPER",
            "CEO",
            "COMMITTEE",
            "PRESIDENT",
            "DIRECTOR",
            "PRESIDENT_VICE",
            "SECRETARY",
            "TREASURER",
            "MANAGER",
            "GENERAL",
            "OTHER",
            "REFEREE",
            "UMPIRE",
            "REFEREE_ASSISTANT",
            "REFEREE_RESERVE",
            "REFEREE_ASSISTANT_RESERVE",
            "CREW_CHIEF"
          ],
          "example": "COACH"
        },
        "required": false,
        "in": "query"
      },
      "generated": {
        "name": "generated",
        "description": "Time record generated",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2018-08-16T02:10:48"
        },
        "required": false,
        "in": "query"
      },
      "live": {
        "name": "live",
        "description": "Live competitor standings?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "inProgress": {
        "name": "inProgress",
        "description": "Is the competitor in a current match?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "latest": {
        "name": "latest",
        "description": "Is this the latest standing record ?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "class": {
        "name": "class",
        "description": "The class of the event\n>- `BIOMETRIC` Biometric information\n>- `LOCATION` Positional data relating to an element in match\n>- `SPORT` A sporting action that relates to the running of the match\n>- `TIMING` Timing information\n",
        "schema": {
          "type": "string",
          "enum": [
            "SPORT",
            "LOCATION",
            "BIOMETRIC",
            "TIMING"
          ],
          "maxLength": 100,
          "example": "SPORT"
        },
        "required": false,
        "in": "query"
      },
      "eventType": {
        "name": "eventType",
        "description": "See [Event Types]() for more information",
        "schema": {
          "type": "string",
          "maxLength": 100
        },
        "required": false,
        "in": "query"
      },
      "periodId": {
        "name": "periodId",
        "description": "The identifier for the period\n>- `0` Total match\n>- `1` Period 1\n>- `2` Period 2\n>- `3` Period 3\n>- `4` Period 4\n>- `10` Overtime 1\n>- `11` Overtime 2\n>- `12` Overtime 3\n>- `13` Overtime 4\n>- `14` Overtime 5\n>- `15` Overtime 6\n",
        "schema": {
          "type": "integer",
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            10,
            11,
            12,
            13,
            14,
            15
          ]
        },
        "required": false,
        "in": "query"
      },
      "success": {
        "name": "success",
        "description": "Was the event completed successfully?",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "zone": {
        "name": "zone",
        "description": "See [Event Types]() for more information",
        "schema": {
          "type": "string",
          "maxLength": 50
        },
        "required": false,
        "in": "query"
      },
      "subscriptionId": {
        "name": "subscriptionId",
        "description": "The unique identifier of the video stream subscription",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "streamId": {
        "name": "streamId",
        "description": "The unique identifier of the video subscription",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "videoId": {
        "name": "videoId",
        "description": "The unique identifier of the video file",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "locale": {
        "name": "locale",
        "description": "The locale of the video",
        "schema": {
          "type": "string",
          "minLength": 5,
          "maxLength": 5,
          "example": "fr_FR"
        },
        "required": false,
        "in": "query"
      },
      "provider": {
        "name": "provider",
        "description": "The unique code for the video provider",
        "schema": {
          "type": "string",
          "maxLength": 100,
          "example": "Test Provider"
        },
        "required": false,
        "in": "query"
      },
      "sourceNumber": {
        "name": "sourceNumber",
        "description": "Unique identifier for the video source",
        "schema": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "required": false,
        "in": "query"
      },
      "notSubscribed": {
        "name": "notSubscribed",
        "description": "Only show where the user is not already subscribed to the stream",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "baseType": {
        "name": "baseType",
        "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
        "schema": {
          "type": "string",
          "enum": [
            "PERSON",
            "ENTITY",
            "ENTITYGROUP",
            "COMPETITION",
            "SEASON",
            "LEAGUE",
            "ORGANIZATION",
            "DIVISION",
            "CONFERENCE"
          ],
          "maxLength": 100,
          "example": "PERSON"
        },
        "required": false,
        "in": "query"
      },
      "baseId": {
        "name": "baseId",
        "description": "The unique identifier of the object associated with this image record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "secondaryType": {
        "name": "secondaryType",
        "description": "Media Secondary Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `SEASON` Season\n",
        "schema": {
          "type": "string",
          "enum": [
            "ENTITY",
            "ENTITYGROUP",
            "COMPETITION",
            "SEASON",
            "LEAGUE",
            "ORGANIZATION",
            "DIVISION",
            "CONFERENCE"
          ],
          "maxLength": 100,
          "example": "ENTITY"
        },
        "required": false,
        "in": "query"
      },
      "imageId": {
        "name": "imageId",
        "description": "The unique identifier of the image record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "secondaryId": {
        "name": "secondaryId",
        "description": "The unique identifier of the secondary object associated with this image record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "imageType": {
        "name": "imageType",
        "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
        "schema": {
          "type": "string",
          "enum": [
            "PERSON_HEAD",
            "PERSON_WAIST",
            "PERSON_POSE",
            "LOGO",
            "LOGO_BACKGROUND"
          ],
          "maxLength": 100,
          "example": "LOGO"
        },
        "required": false,
        "in": "query"
      },
      "rating": {
        "name": "rating",
        "description": "Media Rating\n>- `HIGH` High\n>- `LOW` Low\n>- `MEDIUM` Medium\n>- `UNKNOWN` Uknown\n",
        "schema": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "LOW",
            "MEDIUM",
            "HIGH"
          ],
          "maxLength": 100,
          "example": "UNKNOWN"
        },
        "required": false,
        "in": "query"
      },
      "participationStatus": {
        "name": "status",
        "description": "Participation status\n>- `ACTIVE` Active\n>- `INJURED` Injured\n>- `OTHER_NOT_PARTICIPATING` Other Non-Participation\n>- `OUT` Out\n>- `SUSPENSED` Suspended\n",
        "schema": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INJURED",
            "OUT",
            "SUSPENSED",
            "OTHER_NOT_PARTICIPATING"
          ],
          "maxLength": 100,
          "example": "ACTIVE"
        },
        "required": false,
        "in": "query"
      },
      "award": {
        "name": "award",
        "description": "Award\n>- `6th_MAN` Sixth Man\n>- `ALL_TEAM` All first team\n>- `COACH` Coach Award\n>- `DEFENSIVE` Defensive Player\n>- `DEFENSIVE_TEAM` Defensive team\n>- `HALL` Hall of Fame\n>- `HONOUR` Honoured\n>- `MIP` Most Improved Player\n>- `MVP` Most Valuable Player\n>- `OTHER` Other\n>- `ROOKIE` Rookie\n",
        "schema": {
          "type": "string",
          "enum": [
            "MVP",
            "MIP",
            "ROOKIE",
            "COACH",
            "ALL_TEAM",
            "DEFENSIVE_TEAM",
            "DEFENSIVE",
            "6th_MAN",
            "OTHER",
            "HONOUR",
            "HALL"
          ],
          "maxLength": 100,
          "example": "MVP"
        },
        "required": false,
        "in": "query"
      },
      "transferType": {
        "name": "transferType",
        "description": "Type of transfer\n>- `DROPPED` Dropped\n>- `OTHER` Other\n>- `PERMIT` Permit\n>- `TRADE` Trade\n>- `TRANSFER` Transfer\n",
        "schema": {
          "type": "string",
          "enum": [
            "TRADE",
            "TRANSFER",
            "DROPPED",
            "PERMIT",
            "OTHER"
          ],
          "maxLength": 100,
          "example": "TRANSFER"
        },
        "required": false,
        "in": "query"
      },
      "feedType": {
        "name": "feedType",
        "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n>- `SECONDARY` Secondary\n",
        "schema": {
          "type": "string",
          "enum": [
            "PRIMARY",
            "SECONDARY",
            "ADDITIONAL_ANGLE",
            "LOW_LATENCY"
          ],
          "maxLength": 30,
          "example": "PRIMARY"
        },
        "required": false,
        "in": "query"
      },
      "content": {
        "name": "content",
        "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
        "schema": {
          "type": "string",
          "enum": [
            "CLEAN",
            "PROGRAM"
          ],
          "maxLength": 30,
          "example": "CLEAN"
        },
        "required": false,
        "in": "query"
      },
      "edited": {
        "name": "edited",
        "description": "If this event has been edited since being originally sent, then this is the last time (UTC) it was updated. If the event hasn't been edited, then this field shouldn't be sent.",
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2016-09-08T02:02:00Z"
        },
        "required": false,
        "in": "query"
      },
      "primaryId": {
        "name": "primaryId",
        "description": "The unique identifier of the primaryType",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "primaryType": {
        "name": "primaryType",
        "description": "The primary table changed",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "fixtures"
        },
        "required": false,
        "in": "query"
      },
      "childType": {
        "name": "childType",
        "description": "The child table changed",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "fixture_roster"
        },
        "required": false,
        "in": "query"
      },
      "platformProvider": {
        "name": "platformProvider",
        "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
        "schema": {
          "type": "string",
          "enum": [
            "5STREAM"
          ],
          "maxLength": 30,
          "example": "5STREAM"
        },
        "required": false,
        "in": "query"
      },
      "providerEventId": {
        "name": "providerEventId",
        "description": "Providers EventId",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "123"
        },
        "required": false,
        "in": "query"
      },
      "providerStatus": {
        "name": "providerStatus",
        "description": "Provider Status",
        "schema": {
          "type": "string",
          "maxLength": 30,
          "example": "setup"
        },
        "required": false,
        "in": "query"
      },
      "automationType": {
        "name": "automationType",
        "description": "Automation type\n>- `AUTOMATIC` Automatic Event\n>- `MANUAL` Manual Event\n>- `TIMED` Timed Event\n",
        "schema": {
          "type": "string",
          "enum": [
            "TIMED",
            "MANUAL",
            "AUTOMATIC"
          ],
          "maxLength": 10,
          "example": "TIMED"
        },
        "required": false,
        "in": "query"
      },
      "onlyUpcoming": {
        "name": "onlyUpcoming",
        "description": "Do not show data for completed matches and those older than 12 hours",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false,
        "in": "query"
      },
      "run_section": {
        "name": "run_section",
        "description": "fvp Run Section\n>- `check_start` Check Start\n>- `setup` Setup\n>- `stop` Stop\n",
        "schema": {
          "type": "string",
          "enum": [
            "setup",
            "check_start",
            "stop"
          ],
          "maxLength": 15,
          "example": "setup"
        },
        "required": false,
        "in": "query"
      },
      "minutes": {
        "name": "minutes",
        "description": "Minutes",
        "schema": {
          "type": "integer",
          "format": "int32"
        },
        "required": false,
        "in": "query"
      },
      "organizationGroupCode": {
        "name": "organizationGroupCode",
        "description": "The unique identifier of the organization group",
        "schema": {
          "type": "string",
          "minLength": 3,
          "maxLength": 150,
          "example": "aubb"
        },
        "required": false,
        "in": "query"
      },
      "organizationGroupMemberId": {
        "name": "organizationGroupMemberId",
        "description": "The unique identifier of the organization group member record",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
        },
        "required": false,
        "in": "query"
      },
      "origin": {
        "name": "origin",
        "description": "The origin of the video file\n>- `STREAM` Streamed\n>- `UPLOAD` Uploaded\n>- `VENUE` Recorded in venue\n",
        "schema": {
          "type": "string",
          "enum": [
            "STREAM",
            "VENUE",
            "UPLOAD"
          ],
          "maxLength": 30,
          "example": "STREAM"
        },
        "required": false,
        "in": "query"
      },
      "video_file_format": {
        "name": "format",
        "description": "The format of the video file\n>- `HLS` A HLS play list\n>- `MP4` One MP4 file\n",
        "schema": {
          "type": "string",
          "enum": [
            "HLS",
            "MP4"
          ],
          "maxLength": 30,
          "example": "HLS"
        },
        "required": false,
        "in": "query"
      },
      "video_file_status": {
        "name": "status",
        "description": "What is the status of the file?\n>- `AVAILABLE` Available for access\n>- `BUILDABLE` Not currently available - but can be built on request\n>- `PENDING` Being added - some parts may be available\n",
        "schema": {
          "type": "string",
          "enum": [
            "AVAILABLE",
            "BUILDABLE",
            "PENDING"
          ],
          "maxLength": 30,
          "example": "AVAILABLE"
        },
        "required": false,
        "in": "query"
      },
      "SEASONeventType": {
        "name": "SEASONeventType",
        "description": "Type of Fixtures\n>- `FIXTURE` Fixture\n>- `PRACTICE` Practice\n",
        "schema": {
          "type": "string",
          "enum": [
            "FIXTURE",
            "PRACTICE"
          ],
          "maxLength": 30,
          "example": "FIXTURE"
        },
        "required": false,
        "in": "query"
      }
    }
  },
  "paths": {
    "/o/{organizationId}/persons": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get a list of persons",
        "description": "Return a list of available persons",
        "operationId": "persons.person_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/persongender"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/nationality"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/personstatus"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create a person",
        "description": "Insert a new person",
        "operationId": "persons.person_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "personId": {
                    "description": "The unique identifier of the person",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `DECEASED` Deceased\n>- `PENDING` Pending\n>- `UNREGISTERED` UnRegistered\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "UNREGISTERED",
                      "PENDING",
                      "DECEASED"
                    ],
                    "maxLength": 30,
                    "default": "ACTIVE",
                    "example": "ACTIVE"
                  },
                  "gender": {
                    "description": "The gender of the person\n>- `FEMALE` Female\n>- `MALE` Male\n>- `UNKNOWN` Unknown\n",
                    "type": "string",
                    "enum": [
                      "MALE",
                      "FEMALE",
                      "UNKNOWN"
                    ],
                    "example": "MALE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 200,
                    "example": "John Smith"
                  },
                  "languageLocal": {
                    "description": "The language code of the full name in [local](#section/Introduction/Character-Sets-and-Names) language. This code is a two letter (lower-case) ISO 639-1 language code.",
                    "type": "string",
                    "maxLength": 2,
                    "nullable": true,
                    "example": "en"
                  },
                  "nameFullLatin": {
                    "description": "The full name of the person in [latin](##section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true,
                    "example": "John Smith"
                  },
                  "dob": {
                    "description": "Date of Birth",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "1978-08-24"
                  },
                  "nationality": {
                    "description": "A 3 letter nationality code. We recommend you use ISO-3166 where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "AUS"
                  },
                  "deceased": {
                    "description": "Date deceased",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2016-09-08"
                  },
                  "additionalNames": {
                    "type": "object",
                    "description": "Additional names for the person. They are broken down by language, so you can have a different set of names per language",
                    "additionalProperties": {
                      "type": "object",
                      "example": "default",
                      "description": "The *property name* here can either be `default` (for a non-language specific name) or a two letter (lower-case) ISO 639-1 language code. eg `fr`, `es`",
                      "additionalProperties": false,
                      "properties": {
                        "display": {
                          "type": "string",
                          "nullable": true
                        },
                        "television": {
                          "description": "The name to be used on television",
                          "type": "string",
                          "nullable": true
                        },
                        "scoreboard": {
                          "description": "The name to be used on the scoreboard",
                          "type": "string",
                          "nullable": true
                        },
                        "pronunciation": {
                          "description": "The description of how to pronounce the name",
                          "type": "string",
                          "nullable": true
                        },
                        "boxscore": {
                          "type": "string",
                          "nullable": true
                        },
                        "jersey": {
                          "type": "string",
                          "nullable": true
                        },
                        "abbreviated": {
                          "type": "string",
                          "nullable": true
                        },
                        "given": {
                          "type": "string",
                          "nullable": true
                        },
                        "family": {
                          "type": "string",
                          "nullable": true
                        },
                        "full": {
                          "type": "string",
                          "nullable": true
                        },
                        "knownAs": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "pattern": "^(default|[a-z]{2})$"
                  },
                  "additionalDetails": {
                    "title": "Additional details",
                    "description": "Additional person detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "height": {
                        "description": "Height in cms",
                        "type": "number",
                        "nullable": true
                      },
                      "weight": {
                        "description": "Weight in kgs",
                        "type": "number",
                        "nullable": true
                      },
                      "dominantHand": {
                        "description": "Dominant hand",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      },
                      "dominantFoot": {
                        "description": "Dominant foot",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "person model",
                "required": [
                  "status",
                  "gender",
                  "nameFullLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/persons/{personId}": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "Get a person",
        "description": "Return detailed information about a specific person",
        "operationId": "persons.person_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "Update a person",
        "description": "Change the information of a specific person",
        "operationId": "persons.person_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `DECEASED` Deceased\n>- `PENDING` Pending\n>- `UNREGISTERED` UnRegistered\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "UNREGISTERED",
                      "PENDING",
                      "DECEASED"
                    ],
                    "maxLength": 30,
                    "default": "ACTIVE",
                    "example": "ACTIVE"
                  },
                  "gender": {
                    "description": "The gender of the person\n>- `FEMALE` Female\n>- `MALE` Male\n>- `UNKNOWN` Unknown\n",
                    "type": "string",
                    "enum": [
                      "MALE",
                      "FEMALE",
                      "UNKNOWN"
                    ],
                    "example": "MALE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 200,
                    "example": "John Smith"
                  },
                  "languageLocal": {
                    "description": "The language code of the full name in [local](#section/Introduction/Character-Sets-and-Names) language. This code is a two letter (lower-case) ISO 639-1 language code.",
                    "type": "string",
                    "maxLength": 2,
                    "nullable": true,
                    "example": "en"
                  },
                  "nameFullLatin": {
                    "description": "The full name of the person in [latin](##section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true,
                    "example": "John Smith"
                  },
                  "dob": {
                    "description": "Date of Birth",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "1978-08-24"
                  },
                  "nationality": {
                    "description": "A 3 letter nationality code. We recommend you use ISO-3166 where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "AUS"
                  },
                  "deceased": {
                    "description": "Date deceased",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2016-09-08"
                  },
                  "additionalNames": {
                    "type": "object",
                    "description": "Additional names for the person. They are broken down by language, so you can have a different set of names per language",
                    "additionalProperties": {
                      "type": "object",
                      "example": "default",
                      "description": "The *property name* here can either be `default` (for a non-language specific name) or a two letter (lower-case) ISO 639-1 language code. eg `fr`, `es`",
                      "additionalProperties": false,
                      "properties": {
                        "display": {
                          "type": "string",
                          "nullable": true
                        },
                        "television": {
                          "description": "The name to be used on television",
                          "type": "string",
                          "nullable": true
                        },
                        "scoreboard": {
                          "description": "The name to be used on the scoreboard",
                          "type": "string",
                          "nullable": true
                        },
                        "pronunciation": {
                          "description": "The description of how to pronounce the name",
                          "type": "string",
                          "nullable": true
                        },
                        "boxscore": {
                          "type": "string",
                          "nullable": true
                        },
                        "jersey": {
                          "type": "string",
                          "nullable": true
                        },
                        "abbreviated": {
                          "type": "string",
                          "nullable": true
                        },
                        "given": {
                          "type": "string",
                          "nullable": true
                        },
                        "family": {
                          "type": "string",
                          "nullable": true
                        },
                        "full": {
                          "type": "string",
                          "nullable": true
                        },
                        "knownAs": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "pattern": "^(default|[a-z]{2})$"
                  },
                  "additionalDetails": {
                    "title": "Additional details",
                    "description": "Additional person detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "height": {
                        "description": "Height in cms",
                        "type": "number",
                        "nullable": true
                      },
                      "weight": {
                        "description": "Weight in kgs",
                        "type": "number",
                        "nullable": true
                      },
                      "dominantHand": {
                        "description": "Dominant hand",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      },
                      "dominantFoot": {
                        "description": "Dominant foot",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "person model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "Delete a person",
        "description": "Delete a specific person",
        "operationId": "persons.person_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/persons/force": {
      "post": {
        "tags": [
          "Persons"
        ],
        "summary": "Create/Update a person",
        "description": "Depending on data, Add a new person or update an existing one",
        "operationId": "persons.person_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "PersonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/PersonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "personId": {
                    "description": "The unique identifier of the person",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `DECEASED` Deceased\n>- `PENDING` Pending\n>- `UNREGISTERED` UnRegistered\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "UNREGISTERED",
                      "PENDING",
                      "DECEASED"
                    ],
                    "maxLength": 30,
                    "default": "ACTIVE",
                    "example": "ACTIVE"
                  },
                  "gender": {
                    "description": "The gender of the person\n>- `FEMALE` Female\n>- `MALE` Male\n>- `UNKNOWN` Unknown\n",
                    "type": "string",
                    "enum": [
                      "MALE",
                      "FEMALE",
                      "UNKNOWN"
                    ],
                    "example": "MALE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the person in [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 200,
                    "example": "John Smith"
                  },
                  "languageLocal": {
                    "description": "The language code of the full name in [local](#section/Introduction/Character-Sets-and-Names) language. This code is a two letter (lower-case) ISO 639-1 language code.",
                    "type": "string",
                    "maxLength": 2,
                    "nullable": true,
                    "example": "en"
                  },
                  "nameFullLatin": {
                    "description": "The full name of the person in [latin](##section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true,
                    "example": "John Smith"
                  },
                  "dob": {
                    "description": "Date of Birth",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "1978-08-24"
                  },
                  "nationality": {
                    "description": "A 3 letter nationality code. We recommend you use ISO-3166 where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "AUS"
                  },
                  "deceased": {
                    "description": "Date deceased",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2016-09-08"
                  },
                  "additionalNames": {
                    "type": "object",
                    "description": "Additional names for the person. They are broken down by language, so you can have a different set of names per language",
                    "additionalProperties": {
                      "type": "object",
                      "example": "default",
                      "description": "The *property name* here can either be `default` (for a non-language specific name) or a two letter (lower-case) ISO 639-1 language code. eg `fr`, `es`",
                      "additionalProperties": false,
                      "properties": {
                        "display": {
                          "type": "string",
                          "nullable": true
                        },
                        "television": {
                          "description": "The name to be used on television",
                          "type": "string",
                          "nullable": true
                        },
                        "scoreboard": {
                          "description": "The name to be used on the scoreboard",
                          "type": "string",
                          "nullable": true
                        },
                        "pronunciation": {
                          "description": "The description of how to pronounce the name",
                          "type": "string",
                          "nullable": true
                        },
                        "boxscore": {
                          "type": "string",
                          "nullable": true
                        },
                        "jersey": {
                          "type": "string",
                          "nullable": true
                        },
                        "abbreviated": {
                          "type": "string",
                          "nullable": true
                        },
                        "given": {
                          "type": "string",
                          "nullable": true
                        },
                        "family": {
                          "type": "string",
                          "nullable": true
                        },
                        "full": {
                          "type": "string",
                          "nullable": true
                        },
                        "knownAs": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "pattern": "^(default|[a-z]{2})$"
                  },
                  "additionalDetails": {
                    "title": "Additional details",
                    "description": "Additional person detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "height": {
                        "description": "Height in cms",
                        "type": "number",
                        "nullable": true
                      },
                      "weight": {
                        "description": "Weight in kgs",
                        "type": "number",
                        "nullable": true
                      },
                      "dominantHand": {
                        "description": "Dominant hand",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      },
                      "dominantFoot": {
                        "description": "Dominant foot",
                        "type": "string",
                        "nullable": true,
                        "enum": [
                          "LEFT",
                          "RIGHT"
                        ]
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "person model",
                "required": [
                  "status",
                  "gender",
                  "nameFullLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/competitions": {
      "get": {
        "tags": [
          "Competitions"
        ],
        "summary": "Get a list of competitions",
        "description": "Return a list of available competitions",
        "operationId": "competitions.competition_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Competitions"
        ],
        "summary": "Create a competition",
        "description": "Insert a new competition",
        "operationId": "competitions.competition_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "competitionId": {
                    "description": "The unique identitifer of the competition",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "leagueId": {
                    "description": "The unique identifier of the league",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this competition given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the competition in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the competition in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "competition model",
                "required": [
                  "nameLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/leagues/{leagueId}/competitions": {
      "get": {
        "tags": [
          "Competitions"
        ],
        "summary": "Get a list of competitions by for a league",
        "description": "Return a list of available competitions for a specific league",
        "operationId": "competitions.competition_list_by_leagueId",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "leagueId",
            "description": "The unique identifier of the league",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/competitions/{competitionId}": {
      "get": {
        "tags": [
          "Competitions"
        ],
        "summary": "Get a competition",
        "description": "Return detailed information about a competition",
        "operationId": "competitions.competition_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "name": "competitionId",
            "description": "The unique identifier of the competition",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Competitions"
        ],
        "summary": "Update a competition",
        "description": "Change the information of a specific competition",
        "operationId": "competitions.competition_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "competitionId",
            "description": "The unique identifier of the competition",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "leagueId": {
                    "description": "The unique identifier of the league",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this competition given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the competition in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the competition in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "competition model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Competitions"
        ],
        "summary": "Delete a competition",
        "description": "Delete a specific competition",
        "operationId": "competitions.competition_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "CompetitionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/CompetitionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "competitionId",
            "description": "The unique identifier of the competition",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/entities": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of teams",
        "description": "Return a list of available teams",
        "operationId": "entities.entity_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a team",
        "description": "Add a new team",
        "operationId": "entities.entity_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "entityId": {
                    "description": "The unique identifier of the team",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityGroupId": {
                    "description": "The club that this team belongs to",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this team given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Los Angeles Armadillos"
                  },
                  "additionalNames": {
                    "type": "object",
                    "properties": {
                      "nameShortLocal": {
                        "description": "The short name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLocal": {
                        "description": "The name of the place associated with the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      },
                      "nameShortLatin": {
                        "description": "The short name of the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLatin": {
                        "description": "The name of the place associated with the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      }
                    }
                  },
                  "nameFullLatin": {
                    "description": "The full name of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Los Angeles Armadillos"
                  },
                  "codeLocal": {
                    "description": "The code of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "codeLatin": {
                    "description": "The code of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the team",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "contacts": {
                    "title": "Contact details",
                    "description": "Public contact fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fax": {
                        "type": "string",
                        "nullable": true,
                        "description": "Fax number",
                        "format": "phone"
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary phone number",
                        "format": "phone"
                      },
                      "phoneSecondary": {
                        "type": "string",
                        "nullable": true,
                        "format": "phone",
                        "description": "Secondary phone number"
                      },
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary email address",
                        "format": "email"
                      }
                    }
                  },
                  "details": {
                    "title": "Additional details",
                    "description": "Additional detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "founded": {
                        "description": "Year Founded",
                        "type": "number",
                        "nullable": true
                      },
                      "squadValue": {
                        "description": "Value of Squad",
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "properties": {
                      "primary": {
                        "description": "Primary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "secondary": {
                        "description": "Secondary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "tertiary": {
                        "description": "Tertiary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "team model",
                "required": [
                  "status",
                  "nameFullLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/entityGroups/{entityGroupId}/entities": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of teams for a club",
        "description": "Return a list of available teams linked to a specific club",
        "operationId": "entities.entity_list_by_entity_group",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "entityGroupId",
            "description": "The unique identifier of the entity group",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/entities/{entityId}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a team",
        "description": "Return detailed information about a specific team",
        "operationId": "entities.entity_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team",
        "description": "Change the information of a specific team",
        "operationId": "entities.entity_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "entityGroupId": {
                    "description": "The club that this team belongs to",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this team given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Los Angeles Armadillos"
                  },
                  "additionalNames": {
                    "type": "object",
                    "properties": {
                      "nameShortLocal": {
                        "description": "The short name of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLocal": {
                        "description": "The name of the place associated with the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      },
                      "nameShortLatin": {
                        "description": "The short name of the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLatin": {
                        "description": "The name of the place associated with the team using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      }
                    }
                  },
                  "nameFullLatin": {
                    "description": "The full name of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Los Angeles Armadillos"
                  },
                  "codeLocal": {
                    "description": "The code of the team in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "codeLatin": {
                    "description": "The code of the team in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the team",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "contacts": {
                    "title": "Contact details",
                    "description": "Public contact fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fax": {
                        "type": "string",
                        "nullable": true,
                        "description": "Fax number",
                        "format": "phone"
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary phone number",
                        "format": "phone"
                      },
                      "phoneSecondary": {
                        "type": "string",
                        "nullable": true,
                        "format": "phone",
                        "description": "Secondary phone number"
                      },
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary email address",
                        "format": "email"
                      }
                    }
                  },
                  "details": {
                    "title": "Additional details",
                    "description": "Additional detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "founded": {
                        "description": "Year Founded",
                        "type": "number",
                        "nullable": true
                      },
                      "squadValue": {
                        "description": "Value of Squad",
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "properties": {
                      "primary": {
                        "description": "Primary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "secondary": {
                        "description": "Secondary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "tertiary": {
                        "description": "Tertiary color of the team.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "team model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete a team",
        "description": "Delete a specific team",
        "operationId": "entities.entity_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/entityGroups": {
      "get": {
        "tags": [
          "Clubs"
        ],
        "summary": "Get a list of clubs",
        "description": "Return a list of available clubs",
        "operationId": "entity_groups.entity_group_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Entity_GroupsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Entity_GroupsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Clubs"
        ],
        "summary": "Create a club",
        "description": "Create a new club",
        "operationId": "entity_groups.entity_group_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Entity_GroupsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Entity_GroupsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "entityGroupId": {
                    "description": "The club that this team belongs to",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this club given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Los Angeles Armadillos"
                  },
                  "additionalNames": {
                    "type": "object",
                    "properties": {
                      "nameShortLocal": {
                        "description": "The short name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLocal": {
                        "description": "The name of the place associated with the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      },
                      "nameShortLatin": {
                        "description": "The short name of the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLatin": {
                        "description": "The name of the place associated with the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      }
                    }
                  },
                  "nameFullLatin": {
                    "description": "The full name of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Los Angeles Armadillos"
                  },
                  "codeLocal": {
                    "description": "The code of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "codeLatin": {
                    "description": "The code of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the club",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "details": {
                    "title": "Additional details",
                    "description": "Additional detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "founded": {
                        "description": "Year Founded",
                        "type": "number",
                        "nullable": true
                      },
                      "squadValue": {
                        "description": "Value of Squad",
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "contacts": {
                    "title": "Contact details",
                    "description": "Public contact fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fax": {
                        "type": "string",
                        "nullable": true,
                        "description": "Fax number",
                        "format": "phone"
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary phone number",
                        "format": "phone"
                      },
                      "phoneSecondary": {
                        "type": "string",
                        "nullable": true,
                        "format": "phone",
                        "description": "Secondary phone number"
                      },
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary email address",
                        "format": "email"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "properties": {
                      "primary": {
                        "description": "Primary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "secondary": {
                        "description": "Secondary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "tertiary": {
                        "description": "Tertiary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "club model",
                "required": [
                  "status",
                  "nameFullLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/entityGroups/{entityGroupId}": {
      "get": {
        "tags": [
          "Clubs"
        ],
        "summary": "Get a club",
        "description": "Return detailed information about a specific club",
        "operationId": "entity_groups.entity_group_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Entity_GroupsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Entity_GroupsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "name": "entityGroupId",
            "description": "The unique identifier of the entity group",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Clubs"
        ],
        "summary": "Update a club",
        "description": "Change the information of a specific club",
        "operationId": "entity_groups.entity_group_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Entity_GroupsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Entity_GroupsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityGroupId",
            "description": "The unique identifier of the entity group",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "internationalReference": {
                    "description": "The international reference for this club given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "nameFullLocal": {
                    "description": "The full name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Los Angeles Armadillos"
                  },
                  "additionalNames": {
                    "type": "object",
                    "properties": {
                      "nameShortLocal": {
                        "description": "The short name of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLocal": {
                        "description": "The name of the place associated with the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      },
                      "nameShortLatin": {
                        "description": "The short name of the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 50,
                        "nullable": true,
                        "example": "Armadillos"
                      },
                      "namePlaceLatin": {
                        "description": "The name of the place associated with the club using [latin](#section/Introduction/Character-Sets-and-Names) characters",
                        "type": "string",
                        "maxLength": 150,
                        "nullable": true,
                        "example": "Los Angeles"
                      }
                    }
                  },
                  "nameFullLatin": {
                    "description": "The full name of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Los Angeles Armadillos"
                  },
                  "codeLocal": {
                    "description": "The code of the club in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "codeLatin": {
                    "description": "The code of the club in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 5,
                    "nullable": true,
                    "example": "TEST"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the club",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "details": {
                    "title": "Additional details",
                    "description": "Additional detail fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "founded": {
                        "description": "Year Founded",
                        "type": "number",
                        "nullable": true
                      },
                      "squadValue": {
                        "description": "Value of Squad",
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "contacts": {
                    "title": "Contact details",
                    "description": "Public contact fields",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fax": {
                        "type": "string",
                        "nullable": true,
                        "description": "Fax number",
                        "format": "phone"
                      },
                      "phone": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary phone number",
                        "format": "phone"
                      },
                      "phoneSecondary": {
                        "type": "string",
                        "nullable": true,
                        "format": "phone",
                        "description": "Secondary phone number"
                      },
                      "email": {
                        "type": "string",
                        "nullable": true,
                        "description": "Primary email address",
                        "format": "email"
                      }
                    }
                  },
                  "colors": {
                    "type": "object",
                    "properties": {
                      "primary": {
                        "description": "Primary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "secondary": {
                        "description": "Secondary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      },
                      "tertiary": {
                        "description": "Tertiary color of the club.  Colors are a hexadecimal string `RRGGBB` with `RR`(red), `GG`(green) and `BB`(blue) representing the components of the colour. ",
                        "type": "string",
                        "minLength": 6,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "FFF111"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "club model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clubs"
        ],
        "summary": "Delete a club",
        "description": "Delete a specific club",
        "operationId": "entity_groups.entity_group_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Entity_GroupsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Entity_GroupsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityGroupId",
            "description": "The unique identifier of the entity group",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/entities": {
      "get": {
        "tags": [
          "Match Teams"
        ],
        "summary": "Get a list of teams in the match",
        "description": "Return a list of teams for a match",
        "operationId": "fixture_entities.fixture_entities_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Match Teams"
        ],
        "summary": "Add or Update a team in a match",
        "description": "Depending on primary keys, Add a team or update an existing entitiy in a match",
        "operationId": "fixture_entities.fixture_entities_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityId": {
                    "description": "The unique identifier of the team",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "conferenceId": {
                    "description": "The unique identifier of the conference",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "divisionId": {
                    "description": "The unique identifier of the division",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "includeInConferenceStatistics": {
                    "description": "Include the statistics for this competitors in the conference statistics?",
                    "type": "boolean",
                    "example": true
                  },
                  "isHome": {
                    "description": "Is competitor the home team ?",
                    "type": "boolean",
                    "example": true
                  },
                  "draw": {
                    "description": "Result for this competitor was a draw ?",
                    "type": "boolean",
                    "example": true
                  },
                  "resultStatus": {
                    "description": "Result status\n>- `CONFIRMED` Confirmed\n>- `DID_NOT_FINISH` Did Not Finish\n>- `DID_NOT_START` Did Not Start\n>- `DISQUALIFIED` Disqualified\n>- `FORFEITED` Forfeited\n>- `IN_PROGRESS` In Progress\n>- `SCHEDULED` Scheduled\n>- `WITHDRAWN` Withdrawn\n>- `WON_BY_FORFEIT` Won By Forfeit\n",
                    "type": "string",
                    "enum": [
                      "SCHEDULED",
                      "IN_PROGRESS",
                      "CONFIRMED",
                      "DISQUALIFIED",
                      "FORFEITED",
                      "WON_BY_FORFEIT",
                      "DID_NOT_FINISH",
                      "WITHDRAWN",
                      "DID_NOT_START"
                    ],
                    "maxLength": 100,
                    "example": "CONFIRMED"
                  },
                  "resultPlace": {
                    "description": "Result placing",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 3,
                    "nullable": true,
                    "example": 1
                  },
                  "startingNumber": {
                    "description": "Starting number",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 3,
                    "nullable": true,
                    "example": 1
                  },
                  "score": {
                    "description": "Score for competitor in match",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "98"
                  },
                  "secondaryScore": {
                    "description": "Secondary score",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "3v3"
                  },
                  "isNeutralVenue": {
                    "description": "Competitor is playing at a neutral venue ?",
                    "type": "boolean",
                    "example": true
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "match teams model",
                "required": [
                  "fixtureId",
                  "resultStatus"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/entities/{entityId}": {
      "get": {
        "tags": [
          "Match Teams"
        ],
        "summary": "Get a team in a match",
        "description": "Return the detail of a specific team in a match",
        "operationId": "fixture_entities.fixture_entities_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Teams"
        ],
        "summary": "Delete a team from a match",
        "description": "Delete a specific team from a match",
        "operationId": "fixture_entities.fixture_entity_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/roster": {
      "get": {
        "tags": [
          "Match Roster"
        ],
        "summary": "Get the roster for a match",
        "description": "Return a list of persons in the roster for a match",
        "operationId": "fixture_roster.fixture_roster_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Match Roster"
        ],
        "summary": "Create/Update a match roster",
        "description": "Depending on the data, Add a new match roster entry or update an existing one",
        "operationId": "fixture_roster.fixture_roster_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityId": {
                    "description": "The unique identifier of the team",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "personId": {
                    "description": "The unique identifier of the person",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "bib": {
                    "description": "The number displayed on the jersey",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "34"
                  },
                  "position": {
                    "description": "Playing position",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "GOALKEEPER"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "match roster model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/entities/{entityId}/roster": {
      "get": {
        "tags": [
          "Match Roster"
        ],
        "summary": "Get the roster for a team in a match",
        "description": "Return a list of persons in the roster for a team in a match",
        "operationId": "fixture_roster.fixture_roster_list_by_entity",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/persons/{personId}/roster": {
      "get": {
        "tags": [
          "Match Roster"
        ],
        "summary": "Get the roster information for a person in a match",
        "description": "Return the detailed roster information for a person in a match",
        "operationId": "fixture_roster.fixture_roster_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Roster"
        ],
        "summary": "Delete a match roster entry",
        "description": "Delete a specific match roster",
        "operationId": "fixture_roster.season_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Fixture_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Fixture_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/fixtures": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a list of matches",
        "description": "Return a list of matches for the season",
        "operationId": "fixtures.fixture_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitorType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureType"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/liveDataAvailable"
          },
          {
            "$ref": "#/components/parameters/liveVideoAvailable"
          },
          {
            "$ref": "#/components/parameters/locked"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/poolCode"
          },
          {
            "$ref": "#/components/parameters/roundCode"
          },
          {
            "$ref": "#/components/parameters/roundNumber"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/fixtureStatus"
          },
          {
            "$ref": "#/components/parameters/timesUnconfirmed"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      },
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Create a match",
        "description": "Add a new match",
        "operationId": "fixtures.fixture_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "practiceDrillType": {
                    "description": "Practice types\n>- `DRILL` Drill\n>- `FITNESS` Fitness\n>- `GAME` Practice Game\n>- `OTHER` Other\n",
                    "type": "string",
                    "enum": [
                      "DRILL",
                      "GAME",
                      "FITNESS",
                      "OTHER"
                    ],
                    "maxLength": 100,
                    "example": "DRILL"
                  },
                  "internationalReference": {
                    "description": "The international reference for this match given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Match status\n>- `ABANDONED` Abandoned\n>- `BYE` Bye\n>- `CANCELLED` Cancelled\n>- `CONFIRMED` Confirmed\n>- `FINISHED` Finished\n>- `IF_NEEDED` If Needed\n>- `IN_PROGRESS` In Progress\n>- `POSTPONED` Postponed\n>- `SCHEDULED` Scheduled\n",
                    "type": "string",
                    "enum": [
                      "SCHEDULED",
                      "BYE",
                      "IN_PROGRESS",
                      "FINISHED",
                      "CONFIRMED",
                      "POSTPONED",
                      "CANCELLED",
                      "ABANDONED",
                      "IF_NEEDED"
                    ],
                    "maxLength": 100,
                    "default": "SCHEDULED",
                    "example": "SCHEDULED"
                  },
                  "fixtureNumber": {
                    "description": "Match number",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 123
                  },
                  "nameLocal": {
                    "description": "The name of the match in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "nameLatin": {
                    "description": "The name of the match in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "startTimeLocal": {
                    "description": "Local start time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-08-16T18:00:00"
                  },
                  "startTimeActualUTC": {
                    "description": "Actual start time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T02:02:23"
                  },
                  "endTimeActualUTC": {
                    "description": "Actual end time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T04:02:23"
                  },
                  "timesUnconfirmed": {
                    "description": "Is the match time yet to be confirmed ?",
                    "type": "boolean",
                    "example": true
                  },
                  "locked": {
                    "description": "Is the match locked (to prevent editing)?",
                    "type": "boolean",
                    "example": true
                  },
                  "placingIfWon": {
                    "description": "Place if Won?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "placingIfLost": {
                    "description": "Place if Lost?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "attendance": {
                    "description": "Crowd attendance",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1123
                  },
                  "sellout": {
                    "description": "Was the match a sellout?",
                    "type": "boolean",
                    "example": true
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "environmental": {
                    "title": "Environmental details",
                    "description": "Details about the environment during the fixture",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "surfaceCondition": {
                        "description": "Condition of surface",
                        "type": "string"
                      }
                    }
                  },
                  "duration": {
                    "description": "Length, in minutes, of the match",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 48
                  },
                  "durationFull": {
                    "description": "Full duration including breaks",
                    "type": "integer",
                    "format": "int32",
                    "default": 180,
                    "nullable": true,
                    "example": 180
                  },
                  "ticketURL": {
                    "description": "Ticket URL",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "roundCode": {
                    "description": "A unique code for the round. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "RN1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "liveDataAvailable": {
                    "description": "Is live data available?",
                    "type": "boolean",
                    "example": true
                  },
                  "liveVideoAvailable": {
                    "description": "Is live video available ?",
                    "type": "boolean",
                    "example": true
                  },
                  "fixtureType": {
                    "description": "Type of match\n>- `ALL_STAR` All Star\n>- `DEMONSTRATION` Demonstration\n>- `FINAL` Final\n>- `FRIENDLY` Friendly\n>- `PLAYOFF` Playoff\n>- `PRESEASON` Pre Season\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "ALL_STAR",
                      "PRESEASON",
                      "REGULAR",
                      "FINAL",
                      "PLAYOFF",
                      "FRIENDLY",
                      "DEMONSTRATION"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "maximumPeriodTypeUsed": {
                    "description": "Maximum Period Type Used\n>- `EXTRA_TIME` Extra Time\n>- `OVERTIME` Overtime\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "REGULAR",
                      "EXTRA_TIME",
                      "OVERTIME"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "competitorType": {
                    "description": "The type of competitors in this match\n>- `ENTITY` Entity\n>- `PERSON` Person\n",
                    "type": "string",
                    "enum": [
                      "PERSON",
                      "ENTITY"
                    ],
                    "maxLength": 50,
                    "example": "ENTITY"
                  },
                  "competitors": {
                    "type": "array",
                    "description": "Array of competitors",
                    "additionalProperties": false,
                    "items": {
                      "type": "object",
                      "title": "The competitors Schema",
                      "additionalProperties": false,
                      "required": [
                        "entityId"
                      ],
                      "properties": {
                        "entityId": {
                          "description": "The uuid of the entity",
                          "type": "string"
                        },
                        "conferenceId": {
                          "description": "The uuid of the conference",
                          "type": "string"
                        },
                        "divisionId": {
                          "description": "The uuid of the division",
                          "type": "string"
                        },
                        "includeInConferenceStatistics": {
                          "description": "Include the statistics for this competitors in the conference statistics?",
                          "type": "boolean"
                        },
                        "isHome": {
                          "description": "Is competitor the home team ?",
                          "type": "boolean"
                        },
                        "draw": {
                          "description": "Result for this competitor was a draw ?",
                          "type": "boolean"
                        },
                        "resultStatus": {
                          "description": "Result status",
                          "type": "string",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "CONFIRMED",
                            "DISQUALIFIED",
                            "FORFEITED",
                            "WON_BY_FORFEIT",
                            "DID_NOT_FINISH",
                            "WITHDRAWN",
                            "DID_NOT_START"
                          ]
                        },
                        "resultPlace": {
                          "description": "Result placing",
                          "type": "number",
                          "nullable": true
                        },
                        "startingNumber": {
                          "description": "Starting number",
                          "type": "number",
                          "nullable": true
                        },
                        "score": {
                          "description": "Score for competitor in match",
                          "type": "string",
                          "nullable": true
                        },
                        "secondaryScore": {
                          "description": "Secondary score",
                          "type": "string",
                          "nullable": true
                        },
                        "isNeutralVenue": {
                          "description": "Competitor is playing at a neutral venue ?",
                          "type": "boolean"
                        },
                        "externalId": {
                          "description": "externalId",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "venueId": {
                    "description": "The unique identifier of the venue",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "match model",
                "required": [
                  "seasonId",
                  "competitorType"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a list of matches for the organization",
        "description": "Return a list of matches for the organization",
        "operationId": "fixtures.organization_fixture_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitorType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureType"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/liveDataAvailable"
          },
          {
            "$ref": "#/components/parameters/liveVideoAvailable"
          },
          {
            "$ref": "#/components/parameters/locked"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/poolCode"
          },
          {
            "$ref": "#/components/parameters/roundCode"
          },
          {
            "$ref": "#/components/parameters/roundNumber"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/fixtureStatus"
          },
          {
            "$ref": "#/components/parameters/timesUnconfirmed"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      },
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Create a match base route",
        "description": "Add a new match, allowing seasonId to be in payload",
        "operationId": "fixtures.fixture_insert_base_route",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "practiceDrillType": {
                    "description": "Practice types\n>- `DRILL` Drill\n>- `FITNESS` Fitness\n>- `GAME` Practice Game\n>- `OTHER` Other\n",
                    "type": "string",
                    "enum": [
                      "DRILL",
                      "GAME",
                      "FITNESS",
                      "OTHER"
                    ],
                    "maxLength": 100,
                    "example": "DRILL"
                  },
                  "internationalReference": {
                    "description": "The international reference for this match given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Match status\n>- `ABANDONED` Abandoned\n>- `BYE` Bye\n>- `CANCELLED` Cancelled\n>- `CONFIRMED` Confirmed\n>- `FINISHED` Finished\n>- `IF_NEEDED` If Needed\n>- `IN_PROGRESS` In Progress\n>- `POSTPONED` Postponed\n>- `SCHEDULED` Scheduled\n",
                    "type": "string",
                    "enum": [
                      "SCHEDULED",
                      "BYE",
                      "IN_PROGRESS",
                      "FINISHED",
                      "CONFIRMED",
                      "POSTPONED",
                      "CANCELLED",
                      "ABANDONED",
                      "IF_NEEDED"
                    ],
                    "maxLength": 100,
                    "default": "SCHEDULED",
                    "example": "SCHEDULED"
                  },
                  "fixtureNumber": {
                    "description": "Match number",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 123
                  },
                  "nameLocal": {
                    "description": "The name of the match in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "nameLatin": {
                    "description": "The name of the match in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "startTimeLocal": {
                    "description": "Local start time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-08-16T18:00:00"
                  },
                  "startTimeActualUTC": {
                    "description": "Actual start time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T02:02:23"
                  },
                  "endTimeActualUTC": {
                    "description": "Actual end time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T04:02:23"
                  },
                  "timesUnconfirmed": {
                    "description": "Is the match time yet to be confirmed ?",
                    "type": "boolean",
                    "example": true
                  },
                  "locked": {
                    "description": "Is the match locked (to prevent editing)?",
                    "type": "boolean",
                    "example": true
                  },
                  "placingIfWon": {
                    "description": "Place if Won?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "placingIfLost": {
                    "description": "Place if Lost?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "attendance": {
                    "description": "Crowd attendance",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1123
                  },
                  "sellout": {
                    "description": "Was the match a sellout?",
                    "type": "boolean",
                    "example": true
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "environmental": {
                    "title": "Environmental details",
                    "description": "Details about the environment during the fixture",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "surfaceCondition": {
                        "description": "Condition of surface",
                        "type": "string"
                      }
                    }
                  },
                  "duration": {
                    "description": "Length, in minutes, of the match",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 48
                  },
                  "durationFull": {
                    "description": "Full duration including breaks",
                    "type": "integer",
                    "format": "int32",
                    "default": 180,
                    "nullable": true,
                    "example": 180
                  },
                  "ticketURL": {
                    "description": "Ticket URL",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "roundCode": {
                    "description": "A unique code for the round. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "RN1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "liveDataAvailable": {
                    "description": "Is live data available?",
                    "type": "boolean",
                    "example": true
                  },
                  "liveVideoAvailable": {
                    "description": "Is live video available ?",
                    "type": "boolean",
                    "example": true
                  },
                  "fixtureType": {
                    "description": "Type of match\n>- `ALL_STAR` All Star\n>- `DEMONSTRATION` Demonstration\n>- `FINAL` Final\n>- `FRIENDLY` Friendly\n>- `PLAYOFF` Playoff\n>- `PRESEASON` Pre Season\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "ALL_STAR",
                      "PRESEASON",
                      "REGULAR",
                      "FINAL",
                      "PLAYOFF",
                      "FRIENDLY",
                      "DEMONSTRATION"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "maximumPeriodTypeUsed": {
                    "description": "Maximum Period Type Used\n>- `EXTRA_TIME` Extra Time\n>- `OVERTIME` Overtime\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "REGULAR",
                      "EXTRA_TIME",
                      "OVERTIME"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "competitorType": {
                    "description": "The type of competitors in this match\n>- `ENTITY` Entity\n>- `PERSON` Person\n",
                    "type": "string",
                    "enum": [
                      "PERSON",
                      "ENTITY"
                    ],
                    "maxLength": 50,
                    "example": "ENTITY"
                  },
                  "competitors": {
                    "type": "array",
                    "description": "Array of competitors",
                    "additionalProperties": false,
                    "items": {
                      "type": "object",
                      "title": "The competitors Schema",
                      "additionalProperties": false,
                      "required": [
                        "entityId"
                      ],
                      "properties": {
                        "entityId": {
                          "description": "The uuid of the entity",
                          "type": "string"
                        },
                        "conferenceId": {
                          "description": "The uuid of the conference",
                          "type": "string"
                        },
                        "divisionId": {
                          "description": "The uuid of the division",
                          "type": "string"
                        },
                        "includeInConferenceStatistics": {
                          "description": "Include the statistics for this competitors in the conference statistics?",
                          "type": "boolean"
                        },
                        "isHome": {
                          "description": "Is competitor the home team ?",
                          "type": "boolean"
                        },
                        "draw": {
                          "description": "Result for this competitor was a draw ?",
                          "type": "boolean"
                        },
                        "resultStatus": {
                          "description": "Result status",
                          "type": "string",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "CONFIRMED",
                            "DISQUALIFIED",
                            "FORFEITED",
                            "WON_BY_FORFEIT",
                            "DID_NOT_FINISH",
                            "WITHDRAWN",
                            "DID_NOT_START"
                          ]
                        },
                        "resultPlace": {
                          "description": "Result placing",
                          "type": "number",
                          "nullable": true
                        },
                        "startingNumber": {
                          "description": "Starting number",
                          "type": "number",
                          "nullable": true
                        },
                        "score": {
                          "description": "Score for competitor in match",
                          "type": "string",
                          "nullable": true
                        },
                        "secondaryScore": {
                          "description": "Secondary score",
                          "type": "string",
                          "nullable": true
                        },
                        "isNeutralVenue": {
                          "description": "Competitor is playing at a neutral venue ?",
                          "type": "boolean"
                        },
                        "externalId": {
                          "description": "externalId",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "venueId": {
                    "description": "The unique identifier of the venue",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "match model",
                "required": [
                  "seasonId",
                  "competitorType"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a match",
        "description": "Return detailed information about a specific match",
        "operationId": "fixtures.fixture_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Matches"
        ],
        "summary": "Update a match",
        "description": "Change the information of a specific match",
        "operationId": "fixtures.fixture_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "practiceDrillType": {
                    "description": "Practice types\n>- `DRILL` Drill\n>- `FITNESS` Fitness\n>- `GAME` Practice Game\n>- `OTHER` Other\n",
                    "type": "string",
                    "enum": [
                      "DRILL",
                      "GAME",
                      "FITNESS",
                      "OTHER"
                    ],
                    "maxLength": 100,
                    "example": "DRILL"
                  },
                  "internationalReference": {
                    "description": "The international reference for this match given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "status": {
                    "description": "Match status\n>- `ABANDONED` Abandoned\n>- `BYE` Bye\n>- `CANCELLED` Cancelled\n>- `CONFIRMED` Confirmed\n>- `FINISHED` Finished\n>- `IF_NEEDED` If Needed\n>- `IN_PROGRESS` In Progress\n>- `POSTPONED` Postponed\n>- `SCHEDULED` Scheduled\n",
                    "type": "string",
                    "enum": [
                      "SCHEDULED",
                      "BYE",
                      "IN_PROGRESS",
                      "FINISHED",
                      "CONFIRMED",
                      "POSTPONED",
                      "CANCELLED",
                      "ABANDONED",
                      "IF_NEEDED"
                    ],
                    "maxLength": 100,
                    "default": "SCHEDULED",
                    "example": "SCHEDULED"
                  },
                  "fixtureNumber": {
                    "description": "Match number",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 123
                  },
                  "nameLocal": {
                    "description": "The name of the match in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "nameLatin": {
                    "description": "The name of the match in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Grand Final"
                  },
                  "startTimeLocal": {
                    "description": "Local start time",
                    "type": "string",
                    "format": "date-time",
                    "example": "2018-08-16T18:00:00"
                  },
                  "startTimeActualUTC": {
                    "description": "Actual start time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T02:02:23"
                  },
                  "endTimeActualUTC": {
                    "description": "Actual end time (UTC)",
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "example": "2018-08-16T04:02:23"
                  },
                  "timesUnconfirmed": {
                    "description": "Is the match time yet to be confirmed ?",
                    "type": "boolean",
                    "example": true
                  },
                  "locked": {
                    "description": "Is the match locked (to prevent editing)?",
                    "type": "boolean",
                    "example": true
                  },
                  "placingIfWon": {
                    "description": "Place if Won?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "placingIfLost": {
                    "description": "Place if Lost?",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "attendance": {
                    "description": "Crowd attendance",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1123
                  },
                  "sellout": {
                    "description": "Was the match a sellout?",
                    "type": "boolean",
                    "example": true
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "environmental": {
                    "title": "Environmental details",
                    "description": "Details about the environment during the fixture",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "surfaceCondition": {
                        "description": "Condition of surface",
                        "type": "string"
                      }
                    }
                  },
                  "duration": {
                    "description": "Length, in minutes, of the match",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 48
                  },
                  "durationFull": {
                    "description": "Full duration including breaks",
                    "type": "integer",
                    "format": "int32",
                    "default": 180,
                    "nullable": true,
                    "example": 180
                  },
                  "ticketURL": {
                    "description": "Ticket URL",
                    "type": "string",
                    "maxLength": 200,
                    "nullable": true
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "roundCode": {
                    "description": "A unique code for the round. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "RN1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "liveDataAvailable": {
                    "description": "Is live data available?",
                    "type": "boolean",
                    "example": true
                  },
                  "liveVideoAvailable": {
                    "description": "Is live video available ?",
                    "type": "boolean",
                    "example": true
                  },
                  "fixtureType": {
                    "description": "Type of match\n>- `ALL_STAR` All Star\n>- `DEMONSTRATION` Demonstration\n>- `FINAL` Final\n>- `FRIENDLY` Friendly\n>- `PLAYOFF` Playoff\n>- `PRESEASON` Pre Season\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "ALL_STAR",
                      "PRESEASON",
                      "REGULAR",
                      "FINAL",
                      "PLAYOFF",
                      "FRIENDLY",
                      "DEMONSTRATION"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "maximumPeriodTypeUsed": {
                    "description": "Maximum Period Type Used\n>- `EXTRA_TIME` Extra Time\n>- `OVERTIME` Overtime\n>- `REGULAR` Regular\n",
                    "type": "string",
                    "enum": [
                      "REGULAR",
                      "EXTRA_TIME",
                      "OVERTIME"
                    ],
                    "maxLength": 50,
                    "example": "REGULAR"
                  },
                  "competitorType": {
                    "description": "The type of competitors in this match\n>- `ENTITY` Entity\n>- `PERSON` Person\n",
                    "type": "string",
                    "enum": [
                      "PERSON",
                      "ENTITY"
                    ],
                    "maxLength": 50,
                    "example": "ENTITY"
                  },
                  "competitors": {
                    "type": "array",
                    "description": "Array of competitors",
                    "additionalProperties": false,
                    "items": {
                      "type": "object",
                      "title": "The competitors Schema",
                      "additionalProperties": false,
                      "required": [
                        "entityId"
                      ],
                      "properties": {
                        "entityId": {
                          "description": "The uuid of the entity",
                          "type": "string"
                        },
                        "conferenceId": {
                          "description": "The uuid of the conference",
                          "type": "string"
                        },
                        "divisionId": {
                          "description": "The uuid of the division",
                          "type": "string"
                        },
                        "includeInConferenceStatistics": {
                          "description": "Include the statistics for this competitors in the conference statistics?",
                          "type": "boolean"
                        },
                        "isHome": {
                          "description": "Is competitor the home team ?",
                          "type": "boolean"
                        },
                        "draw": {
                          "description": "Result for this competitor was a draw ?",
                          "type": "boolean"
                        },
                        "resultStatus": {
                          "description": "Result status",
                          "type": "string",
                          "enum": [
                            "SCHEDULED",
                            "IN_PROGRESS",
                            "CONFIRMED",
                            "DISQUALIFIED",
                            "FORFEITED",
                            "WON_BY_FORFEIT",
                            "DID_NOT_FINISH",
                            "WITHDRAWN",
                            "DID_NOT_START"
                          ]
                        },
                        "resultPlace": {
                          "description": "Result placing",
                          "type": "number",
                          "nullable": true
                        },
                        "startingNumber": {
                          "description": "Starting number",
                          "type": "number",
                          "nullable": true
                        },
                        "score": {
                          "description": "Score for competitor in match",
                          "type": "string",
                          "nullable": true
                        },
                        "secondaryScore": {
                          "description": "Secondary score",
                          "type": "string",
                          "nullable": true
                        },
                        "isNeutralVenue": {
                          "description": "Competitor is playing at a neutral venue ?",
                          "type": "boolean"
                        },
                        "externalId": {
                          "description": "externalId",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "venueId": {
                    "description": "The unique identifier of the venue",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "match model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Matches"
        ],
        "summary": "Delete a match",
        "description": "Delete a specific match",
        "operationId": "fixtures.fixture_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/leagues": {
      "get": {
        "tags": [
          "Leagues"
        ],
        "summary": "Get a list of leagues",
        "description": "Return a list of available leagues within the organization.",
        "operationId": "leagues.league_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LeaguesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/LeaguesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/countryCode"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/regionType"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Leagues"
        ],
        "summary": "Create a new league",
        "description": "Add a new league to the organization.",
        "operationId": "leagues.league_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LeaguesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/LeaguesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "leagueId": {
                    "description": "The unique identifier of the league",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the league in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the league in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the league. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "regionType": {
                    "description": "How geographically relevant is this league\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
                    "type": "string",
                    "enum": [
                      "LOCAL",
                      "STATE",
                      "INTERSTATE",
                      "NATIONAL",
                      "INTERNATIONAL"
                    ],
                    "example": "STATE"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "league model",
                "required": [
                  "nameLocal",
                  "regionType"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/leagues/{leagueId}": {
      "get": {
        "tags": [
          "Leagues"
        ],
        "summary": "Get a league",
        "description": "Return detailed information about a specific league.",
        "operationId": "leagues.league_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LeaguesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/LeaguesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "leagueId",
            "description": "The unique identifier of the league",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Leagues"
        ],
        "summary": "Update a league",
        "description": "Change the information of a specific league",
        "operationId": "leagues.league_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LeaguesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/LeaguesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "leagueId",
            "description": "The unique identifier of the league",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the league in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the league in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the league. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "regionType": {
                    "description": "How geographically relevant is this league\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
                    "type": "string",
                    "enum": [
                      "LOCAL",
                      "STATE",
                      "INTERSTATE",
                      "NATIONAL",
                      "INTERNATIONAL"
                    ],
                    "example": "STATE"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "league model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Leagues"
        ],
        "summary": "Delete a league",
        "description": "Delete a specific league",
        "operationId": "leagues.league_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "LeaguesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/LeaguesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "leagueId",
            "description": "The unique identifier of the league",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get a list of organizations",
        "description": "Return a list of available organizations",
        "operationId": "organizations.organization_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "OrganizationsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/countryCode"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/regionType"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a new organization",
        "description": "Add a new organization to the system",
        "operationId": "organizations.organization_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "OrganizationsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:admin_organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "organizationId": {
                    "description": "The unique identifier of the organization",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "b1a23"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the organization in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the organization in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the organization. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "regionType": {
                    "description": "How geographically relevant is this organization\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
                    "type": "string",
                    "enum": [
                      "LOCAL",
                      "STATE",
                      "INTERSTATE",
                      "NATIONAL",
                      "INTERNATIONAL"
                    ],
                    "example": "STATE"
                  }
                },
                "title": "organization model",
                "required": [
                  "nameLocal",
                  "regionType"
                ]
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Get an organization",
        "description": "Return detailed information about a specific organization",
        "operationId": "organizations.organization_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "OrganizationsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Update an organization",
        "description": "Change the information of a specific organization",
        "operationId": "organizations.organization_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "OrganizationsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:admin_organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the organization in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the organization in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the organization. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "regionType": {
                    "description": "How geographically relevant is this organization\n>- `INTERNATIONAL` Multiple countries\n>- `INTERSTATE` Cross state\n>- `LOCAL` Local area\n>- `NATIONAL` One country\n>- `STATE` One state\n",
                    "type": "string",
                    "enum": [
                      "LOCAL",
                      "STATE",
                      "INTERSTATE",
                      "NATIONAL",
                      "INTERNATIONAL"
                    ],
                    "example": "STATE"
                  }
                },
                "title": "organization model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete an organization",
        "description": "Delete an organization",
        "operationId": "organizations.organization_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "OrganizationsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:admin_organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/stages": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a list of stages",
        "description": "Return a list of stages for a season",
        "operationId": "season_stages.season_stage_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_StagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_StagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Create a stage",
        "description": "Add a new stage in a season",
        "operationId": "season_stages.season_stage_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_StagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_StagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "example": "ST1"
                  },
                  "nameLocal": {
                    "description": "The name of the season stage in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the season stage in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "stageOrder": {
                    "description": "User defined sort order of the stage",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 3,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "season stage model",
                "required": [
                  "seasonId",
                  "stageCode"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/stages/{stageCode}": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a stage",
        "description": "Return detailed information about a specific stage",
        "operationId": "season_stages.season_stage_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_StagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_StagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "stageCode",
            "description": "The stage identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "ST1"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Update a stage",
        "description": "Change the information of a specific stage",
        "operationId": "season_stages.season_stage_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_StagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_StagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "stageCode",
            "description": "The stage identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "ST1"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "nameLocal": {
                    "description": "The name of the season stage in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the season stage in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "stageOrder": {
                    "description": "User defined sort order of the stage",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 3,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "season stage model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Delete a stage",
        "description": "Delete a specific stage",
        "operationId": "season_stages.season_stages_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_StagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_StagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "stageCode",
            "description": "The stage identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "ST1"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/pools": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a list of pools",
        "description": "Return a list of the pools for a season",
        "operationId": "season_pools.season_pool_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_PoolsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_PoolsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Create a pool",
        "description": "Add a new pool into a season",
        "operationId": "season_pools.season_pool_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_PoolsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_PoolsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "example": "P1"
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "nameLocal": {
                    "description": "The name of the pool in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Stage 1"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "S1"
                  },
                  "nameLatin": {
                    "description": "The name of the pool in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Stage 1"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "S1"
                  },
                  "poolOrder": {
                    "description": "User defined sort order of the ~pool~",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "pool model",
                "required": [
                  "seasonId",
                  "poolCode"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/pools/{poolCode}": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a pool",
        "description": "Return detailed information about a specific pool",
        "operationId": "season_pools.season_pool_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_PoolsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_PoolsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "poolCode",
            "description": "The pool identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "P1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Update a pool",
        "description": "Change the information of a specific pool",
        "operationId": "season_pools.season_pool_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_PoolsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_PoolsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "poolCode",
            "description": "The pool identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "P1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "nameLocal": {
                    "description": "The name of the pool in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Stage 1"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "S1"
                  },
                  "nameLatin": {
                    "description": "The name of the pool in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Stage 1"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "S1"
                  },
                  "poolOrder": {
                    "description": "User defined sort order of the ~pool~",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "pool model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Delete a pool",
        "description": "Delete a specific pool",
        "operationId": "season_pools.season_pools_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_PoolsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_PoolsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "poolCode",
            "description": "The pool identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "P1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/roster": {
      "get": {
        "tags": [
          "Season Roster"
        ],
        "summary": "Get all rosters for a season",
        "description": "Return a list of all rosters for a season",
        "operationId": "season_roster.season_roster_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/participationStatus"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Season Roster"
        ],
        "summary": "Create/Update a roster",
        "description": "Depending on the data, either add a person to a roster, or update an existing roster",
        "operationId": "season_roster.season_roster_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityId": {
                    "description": "The unique identifier of the team",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityGroupId": {
                    "description": "The club that this team belongs to",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "divisionId": {
                    "description": "The unique identifier of the division",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "conferenceId": {
                    "description": "The unique identifier of the conference",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "personId": {
                    "description": "The unique identifier of the person",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "bib": {
                    "description": "The number displayed on the jersey",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "34"
                  },
                  "position": {
                    "description": "Playing position",
                    "type": "string",
                    "maxLength": 100,
                    "nullable": true,
                    "example": "GOALKEEPER"
                  },
                  "status": {
                    "description": "Participation status\n>- `ACTIVE` Active\n>- `INJURED` Injured\n>- `OTHER_NOT_PARTICIPATING` Other Non-Participation\n>- `OUT` Out\n>- `SUSPENSED` Suspended\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INJURED",
                      "OUT",
                      "SUSPENSED",
                      "OTHER_NOT_PARTICIPATING"
                    ],
                    "maxLength": 100,
                    "example": "ACTIVE"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "season roster model",
                "required": [
                  "status"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/entities/{entityId}/roster": {
      "get": {
        "tags": [
          "Season Roster"
        ],
        "summary": "Get the roster for a team for the season",
        "description": "Return the roster for a team for the season",
        "operationId": "season_roster.season_roster_list_by_entity",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/participationStatus"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/persons/{personId}/roster": {
      "get": {
        "tags": [
          "Season Roster"
        ],
        "summary": "Get the roster detail for a person for the season",
        "description": "Return the detailed roster detail for a specific person for the season",
        "operationId": "season_roster.season_roster_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/participationStatus"
          }
        ]
      },
      "delete": {
        "tags": [
          "Season Roster"
        ],
        "summary": "Delete a season roster",
        "description": "Delete a person from the roster in a season",
        "operationId": "season_roster.season_roster_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RosterModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RosterModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "personId",
            "description": "The unique identifier of the person",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/rounds": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a list of rounds",
        "description": "Return a list of rounds in a season",
        "operationId": "season_rounds.season_round_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/poolCode"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Create a round",
        "description": "Add a new round in a season",
        "operationId": "season_rounds.season_round_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "roundCode": {
                    "description": "A unique code for the round. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "example": "RN1"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "nameLocal": {
                    "description": "The name of the round in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "nameLatin": {
                    "description": "The name of the round in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "roundOrder": {
                    "description": "User defined sort order of the stage",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 999,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "round model",
                "required": [
                  "seasonId",
                  "roundCode"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/rounds/{roundCode}": {
      "get": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Get a round",
        "description": "Return detailed information about a specific round",
        "operationId": "season_rounds.season_round_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "roundCode",
            "description": "The round identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "RN1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Update a round",
        "description": "Change the information of a specific round",
        "operationId": "season_rounds.season_round_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "roundCode",
            "description": "The round identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "RN1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "nameLocal": {
                    "description": "The name of the round in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "nameLatin": {
                    "description": "The name of the round in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "roundOrder": {
                    "description": "User defined sort order of the stage",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 999,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "round model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Delete a round",
        "description": "Delete a specific round",
        "operationId": "season_rounds.season_rounds_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "roundCode",
            "description": "The round identifier within a season",
            "schema": {
              "type": "string",
              "maxLength": 30,
              "example": "RN1"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/rounds/force": {
      "post": {
        "tags": [
          "Stages, Pools & Rounds"
        ],
        "summary": "Create or Update a round",
        "description": "Depending on primary keys, insert a new round or update an existing one",
        "operationId": "season_rounds.season_round_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_RoundsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_RoundsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "roundCode": {
                    "description": "A unique code for the round. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "example": "RN1"
                  },
                  "poolCode": {
                    "description": "A unique code for the pool. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "P1"
                  },
                  "stageCode": {
                    "description": "A unique code for the stage. (Unique for season)",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "ST1"
                  },
                  "roundNumber": {
                    "description": "The number given to the round",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": 1
                  },
                  "nameLocal": {
                    "description": "The name of the round in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "nameLatin": {
                    "description": "The name of the round in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Rivalry Round"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "RR"
                  },
                  "roundOrder": {
                    "description": "User defined sort order of the stage",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 999,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "round model",
                "required": [
                  "seasonId",
                  "roundCode"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/competitions/{competitionId}/seasons": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "summary": "Get a list of seasons",
        "description": "Return a list of seasons in the competition.",
        "operationId": "seasons.season_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SeasonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SeasonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/SEASONeventType"
          },
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/ageGroup"
          },
          {
            "name": "competitionId",
            "description": "The unique identifier of the competition",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/endDate"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/gender"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/representation"
          },
          {
            "$ref": "#/components/parameters/seasonType"
          },
          {
            "$ref": "#/components/parameters/standard"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Seasons"
        ],
        "summary": "Create a new season",
        "description": "Add a new season",
        "operationId": "seasons.season_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SeasonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SeasonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "competitionId",
            "description": "The unique identifier of the competition",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "competitionId": {
                    "description": "The unique identitifer of the competition",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this season given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "eventType": {
                    "description": "Primary Type of Matches\n>- `FIXTURE` Fixture\n>- `PRACTICE` Practice\n",
                    "type": "string",
                    "enum": [
                      "FIXTURE",
                      "PRACTICE"
                    ],
                    "maxLength": 30,
                    "default": "FIXTURE",
                    "example": "FIXTURE"
                  },
                  "seasonType": {
                    "description": "The type of matches added to this season\n>- `ONE_OFF` One off\n>- `SEASON` Season\n>- `TOURNAMENT` Tournament\n",
                    "type": "string",
                    "enum": [
                      "SEASON",
                      "TOURNAMENT",
                      "ONE_OFF"
                    ],
                    "maxLength": 30,
                    "example": "SEASON"
                  },
                  "year": {
                    "description": "Year of the season",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 4,
                    "example": 2019
                  },
                  "grade": {
                    "description": "The playing grade of the matches in this season",
                    "type": "string",
                    "maxLength": 50,
                    "example": "A"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "includeInStatistics": {
                    "description": "Include this season in calculated statistics?",
                    "type": "boolean",
                    "example": true
                  },
                  "nameLocal": {
                    "description": "The name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test season"
                  },
                  "nameLatin": {
                    "description": "The name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test season"
                  },
                  "nameShortLocal": {
                    "description": "The abbreviated name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "nameShortLatin": {
                    "description": "The abbreviated name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "startDate": {
                    "description": "Season start date",
                    "type": "string",
                    "format": "date",
                    "example": "2016-09-08"
                  },
                  "endDate": {
                    "description": "Season start date",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2016-09-08"
                  },
                  "gender": {
                    "description": "The gender of the participants in the season\n>- `FEMALE` Female\n>- `MALE` Male\n>- `MIXED` Mixed\n",
                    "type": "string",
                    "enum": [
                      "MIXED",
                      "MALE",
                      "FEMALE"
                    ],
                    "maxLength": 20,
                    "example": "MALE"
                  },
                  "ageGroup": {
                    "description": "The age group of the season\n>- `JUNIOR` Junior\n>- `MASTERS` Masters\n>- `SENIOR` Senior\n",
                    "type": "string",
                    "enum": [
                      "JUNIOR",
                      "SENIOR",
                      "MASTERS"
                    ],
                    "maxLength": 50,
                    "example": "SENIOR"
                  },
                  "standard": {
                    "description": "The playing standard of the season\n>- `ELITE` Professional/elite organisation\n>- `FRIENDLY` International Friendly\n>- `GRASS_ROOT` Normal\n>- `INTERNATIONAL` International\n>- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship\n>- `OLYMPIC` Olympics\n>- `REGION` Regional\n>- `TIER2` lesser standard than elite\n>- `TIER3` lesser standard than tier 2\n>- `WORLD_CHAMPIONSHIP` World Championship\n>- `ZONE_CHAMPIONSHIP` International Zone Championship\n",
                    "type": "string",
                    "enum": [
                      "OLYMPIC",
                      "WORLD_CHAMPIONSHIP",
                      "ZONE_CHAMPIONSHIP",
                      "NONCONTINENTAL_CHAMPIONSHIP",
                      "FRIENDLY",
                      "INTERNATIONAL",
                      "REGION",
                      "ELITE",
                      "TIER2",
                      "TIER3",
                      "GRASS_ROOT"
                    ],
                    "maxLength": 50,
                    "example": "ELITE"
                  },
                  "representation": {
                    "description": "What level are the competitors representing\n>- `CLUB` Club\n>- `COUNTRY` Country\n>- `PERSON` Person\n>- `REGION` Region\n>- `STATE` State\n",
                    "type": "string",
                    "enum": [
                      "CLUB",
                      "STATE",
                      "REGION",
                      "COUNTRY",
                      "PERSON"
                    ],
                    "maxLength": 50,
                    "example": "CLUB"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "configuration": {
                    "title": "Season Configuration",
                    "description": "Season Configuration settings",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "periodBreakDuration": {
                        "type": "number"
                      },
                      "halfTimeDuration": {
                        "type": "number"
                      },
                      "shotClockLength": {
                        "type": "number"
                      },
                      "foulsUntilBonus": {
                        "type": "number"
                      },
                      "foulsAllowedPersonal": {
                        "type": "number"
                      },
                      "foulsAllowedTechnical": {
                        "type": "number"
                      }
                    }
                  }
                },
                "title": "season model",
                "required": [
                  "competitionId",
                  "seasonType",
                  "status",
                  "nameLocal",
                  "startDate",
                  "gender",
                  "ageGroup",
                  "standard",
                  "representation"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}": {
      "get": {
        "tags": [
          "Seasons"
        ],
        "summary": "Get a season",
        "description": "Return detailed information about a specific season",
        "operationId": "seasons.season_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SeasonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SeasonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Seasons"
        ],
        "summary": "Update a season",
        "description": "Change the information of a specific season",
        "operationId": "seasons.season_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SeasonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SeasonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "competitionId": {
                    "description": "The unique identitifer of the competition",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "internationalReference": {
                    "description": "The international reference for this season given by the sport governing body",
                    "type": "string",
                    "maxLength": 30,
                    "nullable": true,
                    "example": "CA3243-3"
                  },
                  "eventType": {
                    "description": "Primary Type of Matches\n>- `FIXTURE` Fixture\n>- `PRACTICE` Practice\n",
                    "type": "string",
                    "enum": [
                      "FIXTURE",
                      "PRACTICE"
                    ],
                    "maxLength": 30,
                    "default": "FIXTURE",
                    "example": "FIXTURE"
                  },
                  "seasonType": {
                    "description": "The type of matches added to this season\n>- `ONE_OFF` One off\n>- `SEASON` Season\n>- `TOURNAMENT` Tournament\n",
                    "type": "string",
                    "enum": [
                      "SEASON",
                      "TOURNAMENT",
                      "ONE_OFF"
                    ],
                    "maxLength": 30,
                    "example": "SEASON"
                  },
                  "year": {
                    "description": "Year of the season",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 4,
                    "example": 2019
                  },
                  "grade": {
                    "description": "The playing grade of the matches in this season",
                    "type": "string",
                    "maxLength": 50,
                    "example": "A"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "includeInStatistics": {
                    "description": "Include this season in calculated statistics?",
                    "type": "boolean",
                    "example": true
                  },
                  "nameLocal": {
                    "description": "The name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test season"
                  },
                  "nameLatin": {
                    "description": "The name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test season"
                  },
                  "nameShortLocal": {
                    "description": "The abbreviated name of the season in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "nameShortLatin": {
                    "description": "The abbreviated name of the season in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "startDate": {
                    "description": "Season start date",
                    "type": "string",
                    "format": "date",
                    "example": "2016-09-08"
                  },
                  "endDate": {
                    "description": "Season start date",
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2016-09-08"
                  },
                  "gender": {
                    "description": "The gender of the participants in the season\n>- `FEMALE` Female\n>- `MALE` Male\n>- `MIXED` Mixed\n",
                    "type": "string",
                    "enum": [
                      "MIXED",
                      "MALE",
                      "FEMALE"
                    ],
                    "maxLength": 20,
                    "example": "MALE"
                  },
                  "ageGroup": {
                    "description": "The age group of the season\n>- `JUNIOR` Junior\n>- `MASTERS` Masters\n>- `SENIOR` Senior\n",
                    "type": "string",
                    "enum": [
                      "JUNIOR",
                      "SENIOR",
                      "MASTERS"
                    ],
                    "maxLength": 50,
                    "example": "SENIOR"
                  },
                  "standard": {
                    "description": "The playing standard of the season\n>- `ELITE` Professional/elite organisation\n>- `FRIENDLY` International Friendly\n>- `GRASS_ROOT` Normal\n>- `INTERNATIONAL` International\n>- `NONCONTINENTAL_CHAMPIONSHIP` Non-continental Championship\n>- `OLYMPIC` Olympics\n>- `REGION` Regional\n>- `TIER2` lesser standard than elite\n>- `TIER3` lesser standard than tier 2\n>- `WORLD_CHAMPIONSHIP` World Championship\n>- `ZONE_CHAMPIONSHIP` International Zone Championship\n",
                    "type": "string",
                    "enum": [
                      "OLYMPIC",
                      "WORLD_CHAMPIONSHIP",
                      "ZONE_CHAMPIONSHIP",
                      "NONCONTINENTAL_CHAMPIONSHIP",
                      "FRIENDLY",
                      "INTERNATIONAL",
                      "REGION",
                      "ELITE",
                      "TIER2",
                      "TIER3",
                      "GRASS_ROOT"
                    ],
                    "maxLength": 50,
                    "example": "ELITE"
                  },
                  "representation": {
                    "description": "What level are the competitors representing\n>- `CLUB` Club\n>- `COUNTRY` Country\n>- `PERSON` Person\n>- `REGION` Region\n>- `STATE` State\n",
                    "type": "string",
                    "enum": [
                      "CLUB",
                      "STATE",
                      "REGION",
                      "COUNTRY",
                      "PERSON"
                    ],
                    "maxLength": 50,
                    "example": "CLUB"
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "configuration": {
                    "title": "Season Configuration",
                    "description": "Season Configuration settings",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "periodBreakDuration": {
                        "type": "number"
                      },
                      "halfTimeDuration": {
                        "type": "number"
                      },
                      "shotClockLength": {
                        "type": "number"
                      },
                      "foulsUntilBonus": {
                        "type": "number"
                      },
                      "foulsAllowedPersonal": {
                        "type": "number"
                      },
                      "foulsAllowedTechnical": {
                        "type": "number"
                      }
                    }
                  }
                },
                "title": "season model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Seasons"
        ],
        "summary": "Delete a season",
        "description": "Delete a specific season",
        "operationId": "seasons.season_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SeasonsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SeasonsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Get a list of sites",
        "description": "Return a list of available sites",
        "operationId": "sites.site_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SitesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SitesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/countryCode"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Create a site",
        "description": "Add a new site",
        "operationId": "sites.site_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SitesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SitesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "siteId": {
                    "description": "The unique identifier of the site",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the site in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the site in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the site. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the site",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "site model",
                "required": [
                  "nameLocal"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/sites/{siteId}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Get a site",
        "description": "Return detailed information about a specific site",
        "operationId": "sites.site_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SitesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SitesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "siteId",
            "description": "The unique identifier of the site",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Update a site",
        "description": "Change the information of a specific site",
        "operationId": "sites.site_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SitesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SitesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "siteId",
            "description": "The unique identifier of the site",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the site in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the site in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "countryCode": {
                    "description": "Country code of the site. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the site",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "site model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site",
        "description": "Delete a specific site",
        "operationId": "sites.site_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SitesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SitesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "siteId",
            "description": "The unique identifier of the site",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/venues": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "Get a list of venues in the season",
        "description": "Return a list of venues for a season",
        "operationId": "venues.season_venues_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_Venues_ListModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_Venues_ListModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/venues": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "Get a list of venues",
        "description": "Return a list of available venues",
        "operationId": "venues.venue_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/countryCode"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Venues"
        ],
        "summary": "Create a venue",
        "description": "Add a new venue",
        "operationId": "venues.venue_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "venueId": {
                    "description": "The unique identifier of the venue",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "siteId": {
                    "description": "The site that this venue belongs to",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the venue in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "alternateNameLocal": {
                    "description": "The alternate name of the venue, in Local Language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test venue"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the venue in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "alternateNameLatin": {
                    "description": "The alternate name of the venue, in Latin characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test venue"
                  },
                  "countryCode": {
                    "description": "Country code of the venue. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "timezone": {
                    "description": "Timezone of the venue.  The name of the zone as defined by the IANA TZ database. https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Australia/Sydney"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the venue",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "venue model",
                "required": [
                  "nameLocal",
                  "timezone"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/sites/{siteId}/venues": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "Get a list of venues by site",
        "description": "Return a list of available venues",
        "operationId": "venues.venue_list_by_siteId",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/countryCode"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "siteId",
            "description": "The unique identifier of the site",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/venues/{venueId}": {
      "get": {
        "tags": [
          "Venues"
        ],
        "summary": "Get a venue",
        "description": "Return detailed information about a specific venue",
        "operationId": "venues.venue_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "venueId",
            "description": "The unique identifier of the venue",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Venues"
        ],
        "summary": "Update a venue",
        "description": "Change the information of a specific venue",
        "operationId": "venues.venue_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "venueId",
            "description": "The unique identifier of the venue",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "siteId": {
                    "description": "The site that this venue belongs to",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "abbreviationLocal": {
                    "description": "An abbreviation/short name in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLocal": {
                    "description": "The name of the venue in the [local](#section/Introduction/Character-Sets-and-Names) language",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Test organization"
                  },
                  "alternateNameLocal": {
                    "description": "The alternate name of the venue, in Local Language",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test venue"
                  },
                  "abbreviationLatin": {
                    "description": "An abbreviation/short name in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 50,
                    "nullable": true,
                    "example": "NFA"
                  },
                  "nameLatin": {
                    "description": "The name of the venue in [latin](#section/Introduction/Character-Sets-and-Names) characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test organization"
                  },
                  "alternateNameLatin": {
                    "description": "The alternate name of the venue, in Latin characters",
                    "type": "string",
                    "maxLength": 150,
                    "nullable": true,
                    "example": "Test venue"
                  },
                  "countryCode": {
                    "description": "Country code of the venue. We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 3,
                    "nullable": true,
                    "example": "USA"
                  },
                  "timezone": {
                    "description": "Timezone of the venue.  The name of the zone as defined by the IANA TZ database. https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
                    "type": "string",
                    "maxLength": 150,
                    "example": "Australia/Sydney"
                  },
                  "address": {
                    "title": "Address schema",
                    "description": "Street Address for the venue",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "address1": {
                        "description": "First line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address2": {
                        "description": "Second line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "address3": {
                        "description": "Third line of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "city": {
                        "description": "The city/suburb of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "state": {
                        "description": "The state of the address",
                        "type": "string",
                        "nullable": true
                      },
                      "postalCode": {
                        "description": "The postal code for the address",
                        "type": "string",
                        "nullable": true
                      },
                      "countryCode": {
                        "description": "ISO Country code of the address.  We recommend you use ISO-3166-1:alpha3 (upper case) values where available.",
                        "type": "string",
                        "nullable": true,
                        "maxLength": 3,
                        "minLength": 3
                      },
                      "longitude": {
                        "type": "number",
                        "nullable": true
                      },
                      "latitude": {
                        "type": "number",
                        "nullable": true
                      }
                    }
                  },
                  "social": {
                    "title": "Social Media",
                    "description": "Social Media contacts",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "website": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "http://www.example.com"
                      },
                      "facebook": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.facebook.com/example"
                      },
                      "twitter": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.twitter.com/example"
                      },
                      "wikipedia": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://en.wikipedia.org/wiki/example"
                      },
                      "instagram": {
                        "type": "string",
                        "nullable": true,
                        "format": "uri",
                        "example": "https://www.instagram.com/example"
                      }
                    }
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "venue model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Venues"
        ],
        "summary": "Delete a venue",
        "description": "Delete a specific venue",
        "operationId": "venues.venue_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "VenuesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/VenuesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "venueId",
            "description": "The unique identifier of the venue",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/persons/merge/from/{fromPersonId}/to/{toPersonId}": {
      "post": {
        "tags": [
          "Merge Records"
        ],
        "summary": "Merge two person records",
        "description": "Merge the records of two persons",
        "operationId": "merge.person_merge",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fromPersonId",
            "description": "The unique identifier of the from record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "toPersonId",
            "description": "The unique identifier of the to record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {},
                "title": "merge model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/entities/merge/from/{fromEntityId}/to/{toEntityId}": {
      "post": {
        "tags": [
          "Merge Records"
        ],
        "summary": "Merge two team records",
        "description": "Merge the records of two teams",
        "operationId": "merge.entity_merge",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fromEntityId",
            "description": "The unique identifier of the from record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "toEntityId",
            "description": "The unique identifier of the to record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {},
                "title": "merge model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/entities/{entityId}/fixtures": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a list of matches for a Team",
        "description": "Return a list of matches, within ~seasonprefix~ season, for a specific Team",
        "operationId": "fixtures_by_entity.fixture_by_entity_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitorType"
          },
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureType"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/isHome"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/liveDataAvailable"
          },
          {
            "$ref": "#/components/parameters/liveVideoAvailable"
          },
          {
            "$ref": "#/components/parameters/locked"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/poolCode"
          },
          {
            "$ref": "#/components/parameters/roundCode"
          },
          {
            "$ref": "#/components/parameters/roundNumber"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/fixtureStatus"
          },
          {
            "$ref": "#/components/parameters/timesUnconfirmed"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/lock": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Locking match",
        "description": "Locking a specific match record",
        "operationId": "fixture_locking.fixture_locking",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {},
                "title": "fixture_locking model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/unlock": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Unlock match",
        "description": "Unlock a specific match record",
        "operationId": "fixture_locking.fixture_unlocking",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {},
                "title": "fixture_locking model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/enable": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Enable a match live video stream",
        "description": "Enable a specific match live video stream",
        "operationId": "fixture_videostream.fixture_videostream_enable",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/video/streams/enable": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Enable season live video streams for all matches",
        "description": "Enable live video stream for all matches in season",
        "operationId": "fixture_videostream.season_videostream_enable",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/video/streams/disable": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Disable season live video streams for all matches",
        "description": "Disable live video stream for all matches in season",
        "operationId": "fixture_videostream.season_videostream_disable",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/disable": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Disable a match live video stream",
        "description": "Disable a specific match live video stream",
        "operationId": "fixture_videostream.fixture_videostream_disable",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/start": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Start a match live video stream recording",
        "description": "Start a specific match live video stream recording",
        "operationId": "fixture_videostream.fixture_videostream_start",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/stop": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Stop a match live video stream recording",
        "description": "Stop a specific match live video stream recording",
        "operationId": "fixture_videostream.fixture_videostream_stop",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "platformProvider": {
                    "description": "Video Provider platform\n>- `5STREAM` 5Stream\n",
                    "type": "string",
                    "enum": [
                      "5STREAM"
                    ],
                    "maxLength": 30,
                    "default": "5STREAM",
                    "example": "5STREAM"
                  }
                },
                "title": "fixture_videosteam model",
                "required": [
                  "fixtureId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/video/streams/subscriptions": {
      "get": {
        "tags": [
          "Video Stream Subscriptions"
        ],
        "summary": "List video stream subscriptions",
        "description": "Display the list of video stream subscriptions for fixtures.",
        "operationId": "video_subscriptions.video_subscription_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_SubscriptionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_SubscriptionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureId"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/onlyUpcoming"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Video Stream Subscriptions"
        ],
        "summary": "Subscribe to a video stream",
        "description": "Subscribe to an upcoming video stream. Any subscription must be in place a minimum of 1 hour before the scheduled start time.",
        "operationId": "video_subscriptions.video_subscription_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_SubscriptionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_SubscriptionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "subscriptionId": {
                    "description": "The unique identifier of the video stream subscription",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "customerId": {
                    "description": "Customer of the subscription",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "provider": {
                    "description": "The code for the provider of the file",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Test Provider"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "sourceNumber": {
                    "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "example": 1
                  },
                  "feedType": {
                    "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
                    "type": "string",
                    "enum": [
                      "PRIMARY",
                      "ADDITIONAL_ANGLE",
                      "LOW_LATENCY"
                    ],
                    "maxLength": 30,
                    "example": "PRIMARY"
                  },
                  "outputResolution": {
                    "description": "The resolution that you want to receive the video in.  This is only valid if outputFormat is `RTMP`.  If outputFormat is not `RTMP` then the output resolution is the same as the input resolution.  If specified the output resolution cannot be higher than the input resolution. You must have specific permission to chose anything other than 720p or 1080p.\n>- `1080` 1920 x 1080\n>- `1280x720@2000k` 1280x720@2000k\n>- `1920x1080@4000k` 1920x1080@4000k\n>- `640x320@850k` 640x320@850k\n>- `720` 1280 x 720\n>- `DESKTOP_384x216@280k` DESKTOP_384x216@280k\n>- `DESKTOP_512x288@500k` DESKTOP_512x288@500k\n>- `DESKTOP_768x432@1000k` DESKTOP_768x432@1000k\n>- `MOBILE_320x180@102k` MOBILE_320x180@102k\n>- `MOBILE_320x180@232k` MOBILE_320x180@232k\n>- `MOBILE_480x270@464k` MOBILE_480x270@464k\n>- `MOBILE_768x432@1000k` MOBILE_768x432@1000k\n",
                    "type": "string",
                    "enum": [
                      "720",
                      "1080",
                      "DESKTOP_768x432@1000k",
                      "DESKTOP_512x288@500k",
                      "DESKTOP_384x216@280k",
                      "MOBILE_768x432@1000k",
                      "MOBILE_480x270@464k",
                      "MOBILE_320x180@232k",
                      "MOBILE_320x180@102k",
                      "1920x1080@4000k",
                      "1280x720@2000k",
                      "640x320@850k"
                    ],
                    "maxLength": 30,
                    "example": "720"
                  },
                  "outputFormat": {
                    "description": "The output format\n>- `HLS` HLS\n>- `RTMP` RTMP\n>- `RTMP_PULL` RTMP Pull\n",
                    "type": "string",
                    "enum": [
                      "RTMP",
                      "RTMP_PULL",
                      "HLS"
                    ],
                    "maxLength": 30,
                    "example": "RTMP"
                  },
                  "streamName": {
                    "description": "The name of the RTMP stream",
                    "type": "string",
                    "maxLength": 250
                  },
                  "subscriptionName": {
                    "description": "The name of the subscription",
                    "type": "string",
                    "maxLength": 250
                  },
                  "outputURL": {
                    "description": "The URL to send the output to. Only valid if outputFormat = 'RTMP'",
                    "type": "string",
                    "maxLength": 200,
                    "example": "rtmp://rtmp-api.facebook.com:80/rtmp/?340ur0JHKJ0398hjkh387HKJD9"
                  },
                  "audio": {
                    "description": "Audio\n>- `AMBIENCE` Only ambience / crowd noise\n>- `BOTH` Both combined\n>- `BOTH_SPLIT_LR` Both (Ambience left channel, Commentary right channel)\n>- `COMMENTARY` Only commentary\n",
                    "type": "string",
                    "enum": [
                      "COMMENTARY",
                      "AMBIENCE",
                      "BOTH",
                      "BOTH_SPLIT_LR"
                    ],
                    "maxLength": 30,
                    "default": "BOTH",
                    "example": "COMMENTARY"
                  },
                  "content": {
                    "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
                    "type": "string",
                    "enum": [
                      "CLEAN",
                      "PROGRAM"
                    ],
                    "maxLength": 30,
                    "example": "CLEAN"
                  }
                },
                "title": "video subscription model",
                "required": [
                  "fixtureId",
                  "provider",
                  "locale",
                  "sourceNumber",
                  "feedType",
                  "outputResolution",
                  "outputFormat",
                  "content"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/video/streams/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Video Stream Subscriptions"
        ],
        "summary": "Get a video stream subscription",
        "description": "Return detailed information about a specific video stream subscription.",
        "operationId": "video_subscriptions.video_subscription_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_SubscriptionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_SubscriptionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subscriptionId",
            "description": "The unique identifier of the video stream subscription",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "put": {
        "tags": [
          "Video Stream Subscriptions"
        ],
        "summary": "Update a video subscription",
        "description": "Change the information of an existing video subscription",
        "operationId": "video_subscriptions.video_subscriptions_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_SubscriptionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_SubscriptionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subscriptionId",
            "description": "The unique identifier of the video stream subscription",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "customerId": {
                    "description": "Customer of the subscription",
                    "type": "integer",
                    "format": "int32",
                    "nullable": true,
                    "example": 1
                  },
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "provider": {
                    "description": "The code for the provider of the file",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Test Provider"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "sourceNumber": {
                    "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "example": 1
                  },
                  "feedType": {
                    "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
                    "type": "string",
                    "enum": [
                      "PRIMARY",
                      "ADDITIONAL_ANGLE",
                      "LOW_LATENCY"
                    ],
                    "maxLength": 30,
                    "example": "PRIMARY"
                  },
                  "outputResolution": {
                    "description": "The resolution that you want to receive the video in.  This is only valid if outputFormat is `RTMP`.  If outputFormat is not `RTMP` then the output resolution is the same as the input resolution.  If specified the output resolution cannot be higher than the input resolution. You must have specific permission to chose anything other than 720p or 1080p.\n>- `1080` 1920 x 1080\n>- `1280x720@2000k` 1280x720@2000k\n>- `1920x1080@4000k` 1920x1080@4000k\n>- `640x320@850k` 640x320@850k\n>- `720` 1280 x 720\n>- `DESKTOP_384x216@280k` DESKTOP_384x216@280k\n>- `DESKTOP_512x288@500k` DESKTOP_512x288@500k\n>- `DESKTOP_768x432@1000k` DESKTOP_768x432@1000k\n>- `MOBILE_320x180@102k` MOBILE_320x180@102k\n>- `MOBILE_320x180@232k` MOBILE_320x180@232k\n>- `MOBILE_480x270@464k` MOBILE_480x270@464k\n>- `MOBILE_768x432@1000k` MOBILE_768x432@1000k\n",
                    "type": "string",
                    "enum": [
                      "720",
                      "1080",
                      "DESKTOP_768x432@1000k",
                      "DESKTOP_512x288@500k",
                      "DESKTOP_384x216@280k",
                      "MOBILE_768x432@1000k",
                      "MOBILE_480x270@464k",
                      "MOBILE_320x180@232k",
                      "MOBILE_320x180@102k",
                      "1920x1080@4000k",
                      "1280x720@2000k",
                      "640x320@850k"
                    ],
                    "maxLength": 30,
                    "example": "720"
                  },
                  "outputFormat": {
                    "description": "The output format\n>- `HLS` HLS\n>- `RTMP` RTMP\n>- `RTMP_PULL` RTMP Pull\n",
                    "type": "string",
                    "enum": [
                      "RTMP",
                      "RTMP_PULL",
                      "HLS"
                    ],
                    "maxLength": 30,
                    "example": "RTMP"
                  },
                  "streamName": {
                    "description": "The name of the RTMP stream",
                    "type": "string",
                    "maxLength": 250
                  },
                  "subscriptionName": {
                    "description": "The name of the subscription",
                    "type": "string",
                    "maxLength": 250
                  },
                  "outputURL": {
                    "description": "The URL to send the output to. Only valid if outputFormat = 'RTMP'",
                    "type": "string",
                    "maxLength": 200,
                    "example": "rtmp://rtmp-api.facebook.com:80/rtmp/?340ur0JHKJ0398hjkh387HKJD9"
                  },
                  "audio": {
                    "description": "Audio\n>- `AMBIENCE` Only ambience / crowd noise\n>- `BOTH` Both combined\n>- `BOTH_SPLIT_LR` Both (Ambience left channel, Commentary right channel)\n>- `COMMENTARY` Only commentary\n",
                    "type": "string",
                    "enum": [
                      "COMMENTARY",
                      "AMBIENCE",
                      "BOTH",
                      "BOTH_SPLIT_LR"
                    ],
                    "maxLength": 30,
                    "default": "BOTH",
                    "example": "COMMENTARY"
                  },
                  "content": {
                    "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
                    "type": "string",
                    "enum": [
                      "CLEAN",
                      "PROGRAM"
                    ],
                    "maxLength": 30,
                    "example": "CLEAN"
                  }
                },
                "title": "video subscription model"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Video Stream Subscriptions"
        ],
        "summary": "Delete a video stream subscription",
        "description": "Delete an existing subscription",
        "operationId": "video_subscriptions.video_subscription_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_SubscriptionsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_SubscriptionsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subscriptionId",
            "description": "The unique identifier of the video stream subscription",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/files": {
      "get": {
        "tags": [
          "Download video"
        ],
        "summary": "List available video files for a match",
        "description": "List the video files for a match that are available for downloaded.",
        "operationId": "video_files.video_file_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_FilesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_FilesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:video_files"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/content"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/video_file_format"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/origin"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/video_file_status"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Download video"
        ],
        "summary": "Add a new video file",
        "description": "Add a new video file",
        "operationId": "video_files.video_file_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_FilesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_FilesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:video_files"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "provider": {
                    "description": "The code for the provider of the file",
                    "type": "string",
                    "maxLength": 100,
                    "example": "Test Provider"
                  },
                  "locale": {
                    "description": "The locale of the video",
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 5,
                    "example": "fr_FR"
                  },
                  "sourceNumber": {
                    "description": "Unique identifier for the video source. This is unique for the provider/fixtureId/locale combination.  Unless the provider is supplying multiple sources per fixture/locale then this is normally 1.",
                    "type": "integer",
                    "format": "int32",
                    "default": 1,
                    "example": 1
                  },
                  "fixtureId": {
                    "description": "The unique identifier of the match",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "resolution": {
                    "description": "The resolution of the video input\n>- `1080` 1920 x 1080\n>- `720` 1280 x 720\n",
                    "type": "string",
                    "enum": [
                      "720",
                      "1080"
                    ],
                    "maxLength": 30,
                    "example": "720"
                  },
                  "name": {
                    "description": "The name/description of the video file",
                    "type": "string",
                    "maxLength": 200
                  },
                  "feedType": {
                    "description": "Type of video input\n>- `ADDITIONAL_ANGLE` Additional angle\n>- `LOW_LATENCY` Low Latency\n>- `PRIMARY` Primary\n",
                    "type": "string",
                    "enum": [
                      "PRIMARY",
                      "ADDITIONAL_ANGLE",
                      "LOW_LATENCY"
                    ],
                    "maxLength": 30,
                    "example": "PRIMARY"
                  },
                  "content": {
                    "description": "Content of the stream\n>- `CLEAN` Output signal is the same as the input signal\n>- `PROGRAM` Score overlays and other enhancements have been added to the stream\n",
                    "type": "string",
                    "enum": [
                      "CLEAN",
                      "PROGRAM"
                    ],
                    "maxLength": 30,
                    "example": "CLEAN"
                  },
                  "fps": {
                    "description": "fps for the video stream",
                    "type": "integer",
                    "format": "int32",
                    "default": 25,
                    "example": 25
                  },
                  "origin": {
                    "description": "The origin of the video file\n>- `STREAM` Streamed\n>- `UPLOAD` Uploaded\n>- `VENUE` Recorded in venue\n",
                    "type": "string",
                    "enum": [
                      "STREAM",
                      "VENUE",
                      "UPLOAD"
                    ],
                    "maxLength": 30,
                    "example": "STREAM"
                  },
                  "format": {
                    "description": "The format of the video file\n>- `HLS` A HLS play list\n>- `MP4` One MP4 file\n",
                    "type": "string",
                    "enum": [
                      "HLS",
                      "MP4"
                    ],
                    "maxLength": 30,
                    "example": "HLS"
                  },
                  "storageProvider": {
                    "description": "Where the video file is stored?\n>- `5STREAM` 5stream\n>- `KEEMOTION` Keemotion\n>- `SYNERGY` Synergy\n",
                    "type": "string",
                    "enum": [
                      "5STREAM",
                      "KEEMOTION",
                      "SYNERGY"
                    ],
                    "maxLength": 30,
                    "writeOnly": true,
                    "example": "KEEMOTION"
                  },
                  "size": {
                    "description": "Size (Mb) of the video (only given if a single file)",
                    "type": "number",
                    "format": "float",
                    "nullable": true,
                    "example": 1024.2
                  },
                  "length": {
                    "description": "Lenth (mins) of the video",
                    "type": "number",
                    "format": "float",
                    "nullable": true,
                    "example": 123.4
                  },
                  "encoding": {
                    "description": "How is the video/audio encoded. codecs etc.",
                    "type": "string",
                    "maxLength": 30,
                    "example": "H.264/AAC"
                  },
                  "url": {
                    "description": "The URL where the file can be found",
                    "type": "string",
                    "maxLength": 200,
                    "writeOnly": true,
                    "example": "https://hls.host.com/video/index.m3u8"
                  },
                  "status": {
                    "description": "What is the status of the file?\n>- `AVAILABLE` Available for access\n>- `BUILDABLE` Not currently available - but can be built on request\n>- `PENDING` Being added - some parts may be available\n",
                    "type": "string",
                    "enum": [
                      "AVAILABLE",
                      "BUILDABLE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "AVAILABLE"
                  },
                  "startTime": {
                    "description": "The time this recording started (UTC)",
                    "type": "string",
                    "format": "date-time"
                  },
                  "expiry": {
                    "description": "When does this file expire? (UTC)",
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "title": "video file model",
                "required": [
                  "provider",
                  "locale",
                  "sourceNumber",
                  "fixtureId",
                  "resolution",
                  "feedType",
                  "content",
                  "fps",
                  "url",
                  "startTime"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/video/files/{videoId}/url": {
      "get": {
        "tags": [
          "Download video"
        ],
        "summary": "Download URL",
        "description": "Generate a url to download a video file for a match. This link is only valid for 30 minutes.",
        "operationId": "video_files.video_file_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Files_DownloadModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Files_DownloadModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "read:video_files"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "videoId",
            "description": "The unique identifier of the video file",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/video/files/{videoId}": {
      "delete": {
        "tags": [
          "Download video"
        ],
        "summary": "Delete a video file",
        "description": "Delete a video file",
        "operationId": "video_files.video_file_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_FilesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_FilesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:video_files"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "videoId",
            "description": "The unique identifier of the video file",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/images/for/{baseType}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get a list of images",
        "description": "Return a list of images for the type",
        "operationId": "images.images_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/imageType"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/rating"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/images/for/ORGANIZATION": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get a list of images for the Organization",
        "description": "Return a list of images for the Organization",
        "operationId": "images.images_list_organization",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/baseType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/imageType"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/rating"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get a list of images for a specific type and id",
        "description": "Return a list of images for the type and id",
        "operationId": "images.images_list_id",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/imageType"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/rating"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/images/for/{baseType}/in/{secondaryType}/{secondaryId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get a list of images for a type in a secondary Type",
        "description": "Return a list of images assigned to type for a secondary type and Id",
        "operationId": "images.images_list_secondary",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/imageType"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/rating"
          },
          {
            "name": "secondaryId",
            "description": "The unique identifier of the secondary object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryType",
            "description": "Media Secondary Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "ENTITY"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get a list of images for a specific base and secondary id",
        "description": "Return a list of images for the base id for a secondary id",
        "operationId": "images.images_list_id_secondary",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/imageType"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/rating"
          },
          {
            "name": "secondaryId",
            "description": "The unique identifier of the secondary object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryType",
            "description": "Media Secondary Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "ENTITY"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/images/{imageId}": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get an image",
        "description": "Return detailed information about a specific image",
        "operationId": "images.images_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "name": "imageId",
            "description": "The unique identifier of the image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      },
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Delete an image",
        "description": "Delete an image",
        "operationId": "images.images_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "name": "imageId",
            "description": "The unique identifier of the image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/images/{imageId}/rating": {
      "put": {
        "tags": [
          "Images"
        ],
        "summary": "Update the rating for an image",
        "description": "Set the rating for an image",
        "operationId": "images.images_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:image_rating"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageId",
            "description": "The unique identifier of the image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "rating": {
                    "description": "The rating given to the quality of the image.  All images are LOW by default but are set ad MEDIUM if they are large enough and have transparency.  Images are only marked as HIGH if they have been manually reviewed.  You should take your use-case into account when you go to use the image.\n>- `HIGH` High\n>- `LOW` Low\n>- `MEDIUM` Medium\n",
                    "type": "string",
                    "enum": [
                      "LOW",
                      "MEDIUM",
                      "HIGH"
                    ],
                    "maxLength": 100,
                    "example": "LOW"
                  }
                },
                "title": "images model"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}/{imageType}": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image",
        "description": "\nYou can upload the image in one of two ways:\n\n- A binary blob in the POST data\n- A 'file' field in a multipart/form-data\n\n\n**Binary Blob**\n\nUpload the image by supplying the image as binary in the POST data.\n\nThe HTTP request would look like\n\n    POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD\n    Host: example.com\n    Authorization: Bearer some-token\n    Content-Length: 808\n    Content-Type: image/png\n\n    [file content goes there]\n\n\n**Multi-part form**\n\nUpload the image by supplying it as a 'file' field in a multipart form.\nThe file field must be called `filedata` and the content-type must be set to `multipart/form-data`\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}/{imageType}/fromURL": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image from a URL",
        "description": "This method allows a new image to uploaded by providing a URL where the image can be downloaded from.\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert_from_url",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "description": "The URL of the image",
                    "type": "string",
                    "maxLength": 250,
                    "example": "http://www.example.com/images/image1.png"
                  }
                },
                "title": "images model",
                "required": [
                  "url"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}/{imageType}": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image in a secondary type",
        "description": "Add a new image for a type in a secondary type.\nYou can upload the image in one of two ways:\n\n- A binary blob in the POST data\n- A 'file' field in a multipart/form-data\n\n\n**Binary Blob**\n\nUpload the image by supplying the image as binary in the POST data.\n\nThe HTTP request would look like\n\n    POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD\n    Host: example.com\n    Authorization: Bearer some-token\n    Content-Length: 808\n    Content-Type: image/png\n\n    [file content goes there]\n\n\n**Multi-part form**\n\nUpload the image by supplying it as a 'file' field in a multipart form.\nThe file field must be called `filedata` and the content-type must be set to `multipart/form-data`\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert_secondary",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryId",
            "description": "The unique identifier of the secondary object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryType",
            "description": "Media Secondary Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "ENTITY"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/{baseType}/{baseId}/in/{secondaryType}/{secondaryId}/{imageType}/fromURL": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image in a secondary type from a URL",
        "description": "This method allows a new image to be uploaded against a secondary type by providing a URL where the image can be downloaded from.\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert_secondary_from_url",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "baseId",
            "description": "The unique identifier of the object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "baseType",
            "description": "Media Base Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `PERSON` Person\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON",
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "PERSON"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryId",
            "description": "The unique identifier of the secondary object associated with this image record",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "secondaryType",
            "description": "Media Secondary Type\n>- `COMPETITION` Competition\n>- `CONFERENCE` Conference\n>- `DIVISION` Division\n>- `ENTITY` Entity\n>- `ENTITYGROUP` Entity Group\n>- `LEAGUE` League\n>- `ORGANIZATION` Organization\n>- `SEASON` Season\n",
            "schema": {
              "type": "string",
              "enum": [
                "ENTITY",
                "ENTITYGROUP",
                "COMPETITION",
                "SEASON",
                "LEAGUE",
                "ORGANIZATION",
                "DIVISION",
                "CONFERENCE"
              ],
              "maxLength": 100,
              "example": "ENTITY"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "description": "The URL of the image",
                    "type": "string",
                    "maxLength": 250,
                    "example": "http://www.example.com/images/image1.png"
                  }
                },
                "title": "images model",
                "required": [
                  "url"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/ORGANIZATION/{imageType}": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image for the organization",
        "description": "Add a new image for the organization.\nYou can upload the image in one of two ways:\n\n- A binary blob in the POST data\n- A 'file' field in a multipart/form-data\n\n\n**Binary Blob**\n\nUpload the image by supplying the image as binary in the POST data.\n\nThe HTTP request would look like\n\n    POST /v1/basketball/o/b1a23/images/for/PERSON/81814d2c-d640-11e8-9f8b-f2801f1b9fd1/PERSON_HEAD\n    Host: example.com\n    Authorization: Bearer some-token\n    Content-Length: 808\n    Content-Type: image/png\n\n    [file content goes there]\n\n\n**Multi-part form**\n\nUpload the image by supplying it as a 'file' field in a multipart form.\nThe file field must be called `filedata` and the content-type must be set to `multipart/form-data`\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert_organization",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/baseType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/images/for/ORGANIZATION/{imageType}/fromURL": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Upload a new image for the organization from a URL",
        "description": "This method allows a new image to be uploaded against the organization type by providing a URL where the image can be downloaded from.\n\n**Note**: By uploading the image you confirm that you have the legal right to do so and to allow this image to be distributed.\n",
        "operationId": "images.images_insert_organization_from_url",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ImagesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/ImagesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/baseType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "imageType",
            "description": "Upload Type\n>- `LOGO` Logo\n>- `LOGO_BACKGROUND` Logo Background\n>- `PERSON_HEAD` Head photo\n>- `PERSON_POSE` Posing photo\n>- `PERSON_WAIST` Waist and Head photo\n",
            "schema": {
              "type": "string",
              "enum": [
                "PERSON_HEAD",
                "PERSON_WAIST",
                "PERSON_POSE",
                "LOGO",
                "LOGO_BACKGROUND"
              ],
              "maxLength": 100,
              "example": "LOGO"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "description": "The URL of the image",
                    "type": "string",
                    "maxLength": 250,
                    "example": "http://www.example.com/images/image1.png"
                  }
                },
                "title": "images model",
                "required": [
                  "url"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/entities": {
      "get": {
        "tags": [
          "Season Teams"
        ],
        "summary": "Get a list of teams in the season",
        "description": "Return a list of teams for a season",
        "operationId": "season_entities.season_entities_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_Entities_ListModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_Entities_ListModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "post": {
        "tags": [
          "Season Teams"
        ],
        "summary": "Add or Update a team in a season",
        "description": "Depending on primary keys, Add a team or update an existing entitiy in a season",
        "operationId": "season_entities.season_entities_insert_update",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "seasonId": {
                    "description": "The unique identitifer of the season",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "entityId": {
                    "description": "The unique identifier of the team",
                    "type": "string",
                    "format": "uuid",
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "conferenceId": {
                    "description": "The unique identifier of the conference",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "divisionId": {
                    "description": "The unique identifier of the division",
                    "type": "string",
                    "format": "uuid",
                    "nullable": true,
                    "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
                  },
                  "status": {
                    "description": "Status\n>- `ACTIVE` Active\n>- `INACTIVE` Inactive\n>- `PENDING` Pending\n",
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "PENDING"
                    ],
                    "maxLength": 30,
                    "example": "ACTIVE"
                  },
                  "seed": {
                    "description": "Initial seeding",
                    "type": "integer",
                    "format": "int32",
                    "maxLength": 3,
                    "nullable": true,
                    "example": 1
                  },
                  "externalId": {
                    "description": "The Id of the data as set by the provider of the data",
                    "type": "string",
                    "maxLength": 150,
                    "pattern": "^[0-9A-Za-z/_]+$",
                    "nullable": true,
                    "example": "A123"
                  }
                },
                "title": "season teams model",
                "required": [
                  "seasonId"
                ]
              }
            }
          }
        }
      }
    },
    "/o/{organizationId}/seasons/{seasonId}/entities/{entityId}": {
      "get": {
        "tags": [
          "Season Teams"
        ],
        "summary": "Get a team in a season",
        "description": "Return the detail of a specific team in a season",
        "operationId": "season_entities.season_entities_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      },
      "delete": {
        "tags": [
          "Season Teams"
        ],
        "summary": "Delete a team from a season",
        "description": "Delete a specific team from a season",
        "operationId": "season_entities.season_entity_delete",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Season_EntitiesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Season_EntitiesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "name": "entityId",
            "description": "The unique identifier of the entity",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "seasonId",
            "description": "The unique identifier of the season",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/reset": {
      "post": {
        "tags": [
          "Matches"
        ],
        "summary": "Reset match",
        "description": "Reset a specific match record. Removes statistics, events and PLAY-BY-PLAY records",
        "operationId": "fixture_reset.fixture_reset",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/SuccessModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:organization"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/forceDelete"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {},
                "title": "fixture_reset model"
              }
            }
          }
        }
      }
    },
    "/masterVenues/{masterVenueId}/video/streams/inputs": {
      "get": {
        "tags": [
          "Video Stream Inputs"
        ],
        "summary": "List available video inputs for a master venue",
        "description": "Display the list of video stream inputs for a master venue. This will only display inputs for matches in the future and from 12 hours in the past that have not been completed/cancelled.",
        "operationId": "video_stream_inputs.video_stream_inputs_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Stream_InputsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Stream_InputsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:video_provider"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitionId"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureId"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "name": "masterVenueId",
            "description": "The unique identifier of the master venue",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      }
    },
    "/o/{organizationId}/video/streams/inputs": {
      "get": {
        "tags": [
          "Video Stream Inputs"
        ],
        "summary": "List available video inputs for an organization",
        "description": "Display the list of video inputs for an organization. This will only display inputs for matches in the future and from 12 hours in the past that have not been completed/cancelled.",
        "operationId": "video_stream_inputs.video_stream_inputs_org_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Stream_InputsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Stream_InputsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:video_provider"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitionId"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureId"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/inputs": {
      "get": {
        "tags": [
          "Video Stream Inputs"
        ],
        "summary": "List available video inputs for a match",
        "description": "Display the list of video inputs for a match",
        "operationId": "video_stream_inputs.video_stream_inputs_fixture_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Stream_InputsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Stream_InputsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "security": [
          {
            "OAuth2": [
              "write:video_provider"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/video/streams/available": {
      "get": {
        "tags": [
          "Video Streams Available"
        ],
        "summary": "List available video streams for an organization",
        "description": "Display the list of video streams for an organization. Streams for completed matches and those older than 12 hours, will not be displayed.",
        "operationId": "video_stream_outputs.video_stream_outputs_org_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Stream_OutputsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Stream_OutputsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitionId"
          },
          {
            "$ref": "#/components/parameters/content"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "$ref": "#/components/parameters/masterVenueId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      }
    },
    "/o/{organizationId}/fixtures/{fixtureId}/video/streams/available": {
      "get": {
        "tags": [
          "Video Streams Available"
        ],
        "summary": "List available video streams for a match",
        "description": "Display the list of video streams for a match",
        "operationId": "video_stream_outputs.video_stream_outputs_fixture_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Video_Stream_OutputsModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Video_Stream_OutputsModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/content"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/feedType"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/provider"
          },
          {
            "$ref": "#/components/parameters/sourceNumber"
          },
          {
            "$ref": "#/components/parameters/updated"
          }
        ]
      }
    },
    "/o/{organizationId}/changeLog": {
      "get": {
        "tags": [
          "Change Log"
        ],
        "summary": "Get a list of changes",
        "description": "Return a list of available changes",
        "operationId": "change_log.change_log_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Change_LogModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/Change_LogModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/childType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationId",
            "description": "The unique identifier of the organization",
            "schema": {
              "type": "string",
              "minLength": 5,
              "maxLength": 5,
              "example": "b1a23"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/primaryId"
          },
          {
            "$ref": "#/components/parameters/primaryType"
          }
        ]
      }
    },
    "/orgGroup/{organizationGroupCode}/fixtures": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a list of matches for the organization group",
        "description": "Return a list of matches for the organization group",
        "operationId": "fixtures_orggroup.orggroup_fixture_list",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/added"
          },
          {
            "$ref": "#/components/parameters/competitorType"
          },
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/fixtureType"
          },
          {
            "$ref": "#/components/parameters/fromTimeLocal"
          },
          {
            "$ref": "#/components/parameters/fromTimeUTC"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/liveDataAvailable"
          },
          {
            "$ref": "#/components/parameters/liveVideoAvailable"
          },
          {
            "$ref": "#/components/parameters/locked"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationGroupCode",
            "description": "The unique identifier of the organization group",
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 150,
              "example": "aubb"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/poolCode"
          },
          {
            "$ref": "#/components/parameters/roundCode"
          },
          {
            "$ref": "#/components/parameters/roundNumber"
          },
          {
            "$ref": "#/components/parameters/seasonId"
          },
          {
            "$ref": "#/components/parameters/stageCode"
          },
          {
            "$ref": "#/components/parameters/fixtureStatus"
          },
          {
            "$ref": "#/components/parameters/timesUnconfirmed"
          },
          {
            "$ref": "#/components/parameters/toTimeLocal"
          },
          {
            "$ref": "#/components/parameters/toTimeUTC"
          },
          {
            "$ref": "#/components/parameters/updated"
          },
          {
            "$ref": "#/components/parameters/venueId"
          }
        ]
      }
    },
    "/orgGroup/{organizationGroupCode}/fixtures/{fixtureId}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "Get a single match for the organization group",
        "description": "Return detailed information about a specific match for the organization group",
        "operationId": "fixtures_orggroup.orggroup_fixture_detail",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "FixturesModel Response",
                  "properties": {
                    "meta": {
                      "$ref": "#/components/schemas/ResponseMetaData"
                    },
                    "links": {
                      "$ref": "#/components/schemas/ResponseLinks"
                    },
                    "included": {
                      "$ref": "#/components/schemas/IncludedData"
                    },
                    "data": {
                      "type": "array",
                      "description": "",
                      "items": {
                        "$ref": "#/components/schemas/FixturesModel"
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/external"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "name": "fixtureId",
            "description": "The unique identifier of the fixture",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "009e9276-5c80-11e8-9c2d-fa7ae01bbebc"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/hideNull"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "organizationGroupCode",
            "description": "The unique identifier of the organization group",
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 150,
              "example": "aubb"
            },
            "required": true,
            "in": "path"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Persons",
      "description": "A Person is a human being involved (playing in, organizing, officiating or in some other way) with the organization.\n\nA person belongs to only one organization. While logically a person could be involved over the course of their career in multiple organizations, in most cases (for the purpose of this API) they are treated as a different person.\n\nA person belongs in teams, matches, competitions etc by virtue of their season rosters, fixture rosters or roles.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Persons{bg:orange}],[Persons]->[Fixture Roster],[Persons]->[Season Roster],[Persons]->[Roles],\">\n\n\n"
    },
    {
      "name": "Competitions",
      "description": "Competition is a grouping of seasons that generally involve the same competitors. Competitions can have a history of many years, or be a once off.\n\nThe competition is owned by the organization, but, many competitions can be grouped together to form a league.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Competitions{bg:orange}],[Competitions]-<>[Seasons],[Leagues]-.-<>[Competitions],[Organizations]-.-<>[Leagues],\">\n\n"
    },
    {
      "name": "Teams",
      "description": "The Team is a grouping of persons who compete together in a match.\nThe team can compete in multiple competitions simultaneously over multiple seasons.  They exist in only one organization. The team can optionally be part of one club.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Clubs],[Organizations]-<>[Teams],[Clubs]-.-<>[Teams],[Matches]<-[Teams{bg:orange}],[Teams]->[Season Roster]\">\n"
    },
    {
      "name": "Clubs",
      "description": "The Club is a grouping of teams. The club may share the same administrative structure over all the teams.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Clubs],[Organizations]-<>[Teams],[Clubs{bg:orange}]-.-<>[Teams],\">\n"
    },
    {
      "name": "Match Teams",
      "description": "A match involves a number of teams. The teams assigned to a match are controlled by these calls.\n"
    },
    {
      "name": "Match Roster",
      "description": "A person can be rostered/selected to a specific match.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Matches]-<>[Match Roster{bg:orange}],[Match Roster]-<>[Persons]\">\n\n"
    },
    {
      "name": "Matches",
      "description": "The Match is the event where the teams actually meet and compete. It occurs at a specific date/time at a specific venue.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Seasons]-<>[Matches{bg:orange}],[Matches]-2<>[Teams],[Matches]-1[Venues],[Matches]-<>[Match roster],[Matches]-.->[Stages],[Matches]-.->[Pools],[Matches]-.->[Rounds],\">\n\nThis call allows a locked match to be unlocked for the purpose of editing.\n\nThis call allows a match video stream to be enabled.\n\nThis call allows a locked match to be reseted for the purpose of editing.\n"
    },
    {
      "name": "Leagues",
      "description": "League is an optional level/entity.  It allows for the grouping of a number of competitions under the one object. Organizations can have many leagues and one league can have many competitions.  One competition can only belong to one league.  However competitions do not have to belong to any leagues.\n\n<img src = \"https://yuml.me/diagram/scruffy/class/[Organizations]-.-<>[Leagues{bg:orange}],[Organizations]-<>[Competitions],[Leagues]-.-<>[Competitions],\">\n"
    },
    {
      "name": "Organizations",
      "description": "The Organization is the top level element in the data structure.  They are the data owner. They are the ones that have provided the data.\n\nAll entities/data in the system belong to **one** organization.\n\n<img src = \"https://yuml.me/diagram/scruffy/class/[Organizations{bg:orange}]-<>[Persons],[Organizations]-.-<>[Leagues],[Organizations]-.-<>[Divisions],[Organizations]-<>[Competitions],[Organizations]-<>[Clubs],[Organizations]-<>[Venues],[Organizations]-<>[Sites],[Organizations]-<>[Teams]\">\n"
    },
    {
      "name": "Stages, Pools & Rounds",
      "description": "**Stages** are a collection of pools, rounds or matches.  A stage can form a group of teams and matches within a season.\n\nA stage can be defined in a match without defining it here.  In that case the only information about the stage will be it's code.  We recommend that all stages are added here as well to give well rounded information.\n\n**Pools** are a collection of rounds or matches.  A pool can form a group of teams and matches within a season and optionally within a stage.\n\nA pool can be defined in a match without defining it here.  In that case the only information about the pool will be it's code.  We recommend that all pools are added here as well to give well rounded information.\n\n**Rounds** are a collection of matches generally over a day or series of days.  A round can optionally be contained within a pool and/or a stage.\n\nA round can be defined in a match without defining it here.  In that case the only information about the round will be it's code.  We recommend that all rounds are added here as well to give well rounded information.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Seasons]-.->[Rounds],[Seasons]-.->[Pools],[Seasons]-.->[Stages],[Stages{bg:orange}]-.->[Pools],[Pools{bg:orange}]-.->[Rounds{bg:orange}],[Stages{bg:orange}]-.->[Rounds],\">\n\nHow they link to a match:\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Stages{bg:orange}]-.->[Matches],[Pools{bg:orange}]-.->[Matches],[Rounds{bg:orange}]-.->[Matches],\">\n\n\n"
    },
    {
      "name": "Season Roster",
      "description": "A season roster is the total roster of all persons allowed to play for a team in a season. This does not mean that all these persons will play in a specific match just that they are avalable to be selected.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Seasons]-<>[Season Roster{bg:orange}],[Season Roster]-<>[Persons]\">\n\n"
    },
    {
      "name": "Seasons",
      "description": "Season is a grouping of matches. Generally the season will last a portion of a year (every year).\n\nThe competition can have many seasons, but the season can only belong to one competition.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Competitions]-<>[Seasons{bg:orange}],[Seasons]-<>[Matches],[Seasons]->[Stages],[Seasons]->[Pools],[Seasons]->[Rounds],[Matches]-.->[Stages],[Matches]-.->[Pools],[Matches]-.->[Rounds],\">\n\n"
    },
    {
      "name": "Sites",
      "description": "Sites are an optional grouping of venues.  This is generally a sporting complex that contains a number of venues.\n\nA venue can be part of 0 or 1 sites.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Venues],[Organizations]-<>[Sites],[Sites{bg:orange]-.-<>[Venues],\">\n\n"
    },
    {
      "name": "Venues",
      "description": "The Venue is the physical location where a match occurs. Every match can have only one venue. The organization has many venues.\n\n<img src = \"https://yuml.me/diagram/scruffy;dir:LR/class/[Organizations]-<>[Venues],[Organizations]-<>[Sites],[Matches]-1[Venues{bg:orange}],[Sites]-.-<>[Venues],\">\n"
    },
    {
      "name": "Merge Records",
      "description": "\nThese groups of calls allow the merging of multiple person or team records.\n\nThey would be used for example, if you find that the same person has been entered twice, but there are records/statistics assigned to both of them. By making this call the statistics and match records assigned to the duplicate person would be assigned to the original person.\n\nThe calls rewrite the statistics and data so instead of being assigned to `fromPersonId`/`fromEntityId` they are assigned to `toPersonId`/`toEntityId`.  There is NO merging of data fields at the person/team level.\n"
    },
    {
      "name": "Video Stream Subscriptions",
      "description": "These endpoints allow a user to subscribe to a video feed.\nIn subscribing to the feed they either:\n    <ul>\n    <li>- provide a URL where the video is to be sent (in the case of RTMP)\n    <li>- receive a URL where the video can be consumed (in the case of HLS)\n    </ul>\n"
    },
    {
      "name": "Download video",
      "description": "After videos are streamed they are stored for later use.  This set of APIS gives you access to these files.\n\nVideos are either available as a HLS playlist or as a single MP4.  Not all videos are available in all formats.\n\nSome MP4 files may have a status of BUILDABLE, which means while they are not available currently they can be built.  This operation will take a number of minutes.\n\nWhile the HLS manifest files are available, this is purely to enable you to download the required content.  They are not meant for public distribution. The links provided may expire.\n\n"
    },
    {
      "name": "Images",
      "description": "An image can be assigned to different objects in the system.\n\nImages can be assigned to an object by specifying the type of the object `baseType` and it's unique identifier `baseId`. For a person the `baseId` would be the value of the `personId` field for that person.\n\nImages can also be assigned to an object based on a secondary type. For example you can assign an image to a person in a team. This means you can have an image for the person in general as well as an image for the person when they are playing for the team. This is accomplished by using the endpoints that support secondary types.  In this instance the `secondaryType` would be `ENTITY` and the `secondaryId` the value of the ~entityId~.\n\n## Image Types\nThere are multiple different types of `imageTypes`. Some are valid for only certain `baseTypes` The image types are\n   #TODO: Need example pictures\n - `LOGO`\n    (This type if valid for all objects except PERSON.)  This is the logo of the organization\n - `LOGO_BACKGROUND`\n    (This type if valid for all objects except PERSON.)  This is the logo of the organization in a format that can be used for background purposes.  This would generally be a stylised version of the logo.\n - `PERSON_HEAD`\n   (Only valid for the person type).  This is a photo of a person from the shoulders up.  This should include the shoulders.\n - `PERSON_WAIST`\n   (Only valid for the person type).  This is a photo of a person from the waist up.\n - `PERSON_POSE`\n   (Only valid for the person type).  This is a photo of a person where they are posing in some position.  This could be a full body image or from the waist up.\n\n\n## Format\n\nImages can be uploaded in any of the following formats:\n\n- `images/jpeg`\n- `images/png`\n\n**PNG files with an alpha channel are the preferred format.**\n\n**File Size**: Images can be a maxiumum of 2Mb in size\n\n**Dimensions**:\nImages being uploaded should be **square** (eg 400x400) and be >= 100x100\n\n## Ratings\nAll images are given a rating when they are uploaded.  All images are LOW by default but are set to MEDIUM if they are large enough and have an alpha channel/transparency.  Images are only marked as HIGH if they have been manually reviewed.\n\n"
    },
    {
      "name": "Season Teams",
      "description": "A season involves a number of teams. The teams assigned to a season are controlled by these calls.\n"
    },
    {
      "name": "Video Stream Inputs",
      "description": "\nThese set of endpoints list the video inputs available for a venue/organization/match.  They would be used by the provider of the video to obtain the address/endpoints of where to send the content.  "
    },
    {
      "name": "Video Streams Available",
      "description": "\nThese endpoints list the video streams that are available to be subscribed to.\n"
    },
    {
      "name": "Change Log",
      "description": "A log of changes made to primary tables.  The childType will show if a child structure was altered for the given primaryType and primaryId"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Entities",
      "tags": [
        "Organizations",
        "Leagues",
        "Competitions",
        "Clubs",
        "Teams",
        "Sites",
        "Venues",
        "Persons"
      ]
    },
    {
      "name": "Season Based",
      "tags": [
        "Seasons",
        "Stages, Pools & Rounds",
        "Season Teams",
        "Season Roster"
      ]
    },
    {
      "name": "Match Based",
      "tags": [
        "Matches",
        "Match Roster",
        "Match Teams"
      ]
    },
    {
      "name": "Images",
      "tags": [
        "Images"
      ]
    },
    {
      "name": "Utilities",
      "tags": [
        "Merge Records",
        "Change Log"
      ]
    },
    {
      "name": "Live Video Consumers",
      "tags": [
        "Video Stream Subscriptions",
        "Video Streams Available"
      ]
    },
    {
      "name": "Live Video Providers",
      "tags": [
        "Video Stream Inputs"
      ]
    },
    {
      "name": "Video",
      "tags": [
        "Download video"
      ]
    }
  ]
}
